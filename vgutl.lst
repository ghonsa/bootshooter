Microsoft (R) Macro Assembler Version 6.11		    06/17/05 15:51:28
vgutl.asm						     Page 1 - 1


				;*****************************************************************************
				;  vgutl - video utility routines
				;       Copyright 2005 Greg Honsa
				;
				;*****************************************************************************
				 include video.inc
			      C ;***********************************************************
			      C ;  Copyright 2005 Greg Honsa
			      C ;
			      C ;***********************************************************
			      C 
			      C 
 0200			      C VBEINFO struc
 0000  0001 [		      C    vbesignature 	db "VESA"		; // VBE Signature
        56 45 53 41
       ]
 0004  0000		      C    vbeversion		dw	?        	; // VBE Version
 0006  00000000		      C    oemstringptr 	dd	?			; // Pointer to OEM String
 000A  0004 [		      C    capabilities  	db 4 dup (?)   	; // Capabilities of graphics cont.
        00
       ]
 000E  00000000		      C    videomodeptr 	dd	? 			; // Pointer to Video Mode List
 0012  0000		      C    totalmemory		dw	?			; // number of 64Kb memory blocks
 0014  0000		      C    oemsoftwarerev	dw	?			; // VBE implementation Software revision
 0016  00000000		      C    oemvendornameptr	dd	?			; // Pointer to Vendor Name String
 001A  00000000		      C    oemproductnameptr dd	?			; // Pointer to Product Name String
 001E  00000000		      C    oemproductrevptr	dd	?			; // Pointer to Product Revision String
 0022  00DE [		      C    reserved 		db 222 dup (?)			; // Reserved for VBE implementation scratch area
        00
       ]
 0100  0100 [		      C    oemdata			db 256 dup (?)	; // Data Area for OEM Strings
        00
       ]
			      C VBEINFO	ends
			      C 
 0100			      C MODEINFO struc
			      C 
			      C    ;// Mandatory information for all VBE revision
			      C 
 0000  0000		      C    modeattributes	dw	?			; // Mode attributes
 0002  00		      C    winaattributes	db	?			; // Window A attributes
 0003  00		      C    winbattributes	db	?			; // Window B attributes
 0004  0000		      C    wingranularity	dw	?			; // Window granularity
 0006  0000		      C    winsize			dw	?			; // Window size
 0008  0000		      C    winasegment		dw	?			; // Window A start segment
 000A  0000		      C    winbsegment		dw	?			; // Window B start segment
 000C  00000000		      C    winfuncptr		dd	?			; // pointer to window function
 0010  0000		      C    bytesperscanline	dw	?			; // Bytes per scan line
			      C 
			      C    ;// Mandatory information for VBE 1.2 and above
			      C 
 0012  0000		      C    xresolution		dw	?			; // Horizontal resolution in pixel or chars
 0014  0000		      C    yresolution		dw	?			; // Vertical resolution in pixel or chars
 0016  00		      C    xcharsize		db	?			; // Character cell width in pixel
 0017  00		      C    ycharsize		db	?			; // Character cell height in pixel
 0018  00		      C    numberofplanes	db	?			; // Number of memory planes
 0019  00		      C    bitsperpixel		db	?			; // Bits per pixel
 001A  00		      C    numberofbanks	db	?			; // Number of banks
 001B  00		      C    memorymodel		db	?			; // Memory model type
 001C  00		      C    banksize			db	?			; // Bank size in KB
 001D  00		      C    numberofimagepages db ?			; // Number of images
 001E  00		      C    reserved1		db	?			; // Reserved for page function
			      C 
			      C    ;// Direct Color fields (required for direct/6 and YUV/7 memory models)
			      C 
 001F  00		      C    redmasksize		db	?			; // Size of direct color red mask in bits
 0020  00		      C    redfieldposition	db	?			; // Bit position of lsb of red bask
 0021  00		      C    greenmasksize	db	?			; // Size of direct color green mask in bits
 0022  00		      C    greenfieldposition db	?		; // Bit position of lsb of green bask
 0023  00		      C    bluemasksize		db	?			; // Size of direct color blue mask in bits
 0024  00		      C    bluefieldposition db ?			; // Bit position of lsb of blue bask
 0025  00		      C   rsvdmasksize		db	?			; // Size of direct color reserved mask in bits
 0026  00		      C    rsvdfieldposition db	?			; // Bit position of lsb of reserved bask   
 0027  00		      C    directcolormodeinfo db ?			; // Direct color mode attributes
			      C 
			      C    ;// Mandatory information for VBE 2.0 and above
			      C 
 0028  00000000		      C    physbaseptr		dd	?			; // Physical address for flat frame buffer
 002C  00000000		      C    offscreenmemoffset dd ?			; // Pointer to start of off screen memory
 0030  0000		      C    offscreenmemsize dw ?			; // Amount of off screen memory in 1Kb units
 0032  00CE [		      C    reserved2 db 206 dup (?)			; // Remainder of ModeInfoBlock
        00
       ]
			      C 
			      C MODEINFO ends
			      C 
 0006			      C VGACOLOR struc
 0000  0000		      C     red		dw	?
 0002  0000		      C     green	dw	?
 0004  0000		      C     blue	dw	?
			      C VGACOLOR ends
			      C 
			      C 

 0000				_Text SEGMENT PUBLIC USE16
				  assume CS:_Text, DS:_Text

				;*****************************************************************************
				;
				;  input di ->vgaColor buffer
				;		 cx = count
				;        bx = start index
				;*****************************************************************************
				public vgaSetPalette
 0000				vgaSetPalette:
 0000  50				push	ax
 0001  53				push	bx
 0002  51				push	cx								     
 0003  52				push	dx
 0004  56				push	si
				; 
				;   --- check params ---
				;
 0005  8B C7				mov		ax,di
 0007  0B C0				or		ax,ax
 0009  74 39				jz		badparm
 000B  83 FB 00				cmp		bx,0
 000E  7C 34				jl		badparm
 0010  8B C3				mov		ax,bx
 0012  03 C1				add		ax,cx
 0014  81 F9 0100			cmp		cx,256
 0018  7F 2A				jg		badparm
				;
				;   --- wait for vertical retrace
				;
 001A  E8 007F				call	waitRetrace

 001D  BA 03C8				mov		dx,03c8h
 0020  8B C3				mov		ax,bx
 0022  EE				out		dx,al		; set start
 0023  E8 0024				call	iowait	 

 0026  BA 03C9				mov		dx,3c9h
 0029  8B F7				mov		si,di		; get pointer to color buff
 002B				setpalloop:
				   assume si:ptr VGACOLOR

 002B  8B 04				mov		ax,[si].red
 002D  EE				out		dx,al
 002E  E8 0019				call	iowait	 

 0031  8B 44 02				mov		ax,[si].green
 0034  EE				out		dx,al
 0035  E8 0012				call	iowait	 

 0038  8B 44 04				mov		ax,[si].blue
 003B  EE				out		dx,al
 003C  E8 000B				call	iowait	 

 003F  83 C6 06				add		si,sizeof VGACOLOR
 0042  E2 E7				loop	setpalloop

 0044				badparm:
 0044  5E				pop		si
 0045  5A				pop		dx
 0046  59				pop		cx
 0047  5B				pop		bx
 0048  58				pop		ax
 0049  C3				ret

 004A				iowait:
 004A  50				push	ax
 004B  51				push	cx
 004C  B9 01F4				mov		cx,500
 004F				iwlp:
 004F  B8 0001				mov		ax,1
 0052  E2 FB				loop	iwlp
 0054  59				pop		cx
 0055  58				pop		ax
 0056  C3				ret
				;*****************************************************************************
				; vbeGetMode
				;	output: bx = mde
				;
				;*****************************************************************************
				public vbeGetMode
 0057				vbeGetMode:	
 0057  50				push	ax
 0058  B8 4F03				mov		ax,4f03h
 005B  CD 10				int		10h
 005D  83 F8 4F				cmp		ax,04fh
 0060  58				pop		ax
 0061  C3				ret
				;*****************************************************************************
				; vbeSetMode - set video mode
				;    input: BX = mode
				;*****************************************************************************
				public vbeSetMode
 0062				vbeSetMode:
 0062  50					push	ax
 0063  B8 4F02					mov		ax,4f02h
 0066  CD 10					int		10h
 0068  83 F8 4F					cmp		ax,04fh
 006B  58					pop		ax
 006C  C3					ret
				;*****************************************************************************
				;  vbeGetInfo
				;     inputs: BX -> VBEINFO
				;
				;
				;*****************************************************************************
				public vbeGetInfo
 006D				vbeGetInfo:
 006D  50				push	ax
 006E  57				push	di
 006F  8B FB				mov		di,bx
 0071  B8 4F00				mov		ax,4f00h
 0074  CD 10				int		10h
 0076  83 F8 4F				cmp		ax,04fh
 0079  5F				pop		di
 007A  58				pop		ax
 007B  C3				ret
				;*****************************************************************************
				;  vbeGetModeInfo 
				;     input:  BX -> MODEINFO
				;             CX = mode
				;
				;*****************************************************************************
				public vbeGetModeInfo
 007C				vbeGetModeInfo:
 007C  50				push	ax
 007D  57				push	di
 007E  8B FB				mov		di,bx
 0080  B8 4F01			   	mov 	ax,4F01h
 0083  CD 10				int		10h
 0085  83 F8 4F				cmp		ax,04fh
 0088  5F				pop		di
 0089  58				pop		ax
 008A  C3				ret
				;*****************************************************************************
				;  vbeSetBankAddr
				;  	 inputs: AX = bank adr
				;			 BX = 0 if bank A, 1 if bank B
				;	 returns zero if ok
				;*****************************************************************************
				public vbeSetBankAddr
 008B				vbeSetBankAddr:
 008B  50				push	ax
 008C  53				push	bx
 008D  52				push	dx

 008E  8B D0				mov		dx,ax
 0090  B8 4F05				mov		ax,4f05h
 0093  CD 10				int		10h
 0095  83 F8 4F				cmp		ax,04fh

 0098  5A				pop		dx
 0099  5B				pop		bx
 009A  58				pop		ax
 009B  C3				ret		
				;*****************************************************************************
				;  waitRetrace
				;  	 inputs: nothing
				;	 returns: nothing
				;*****************************************************************************
				public waitRetrace
 009C				waitRetrace:
 009C  50				push	ax
 009D  52				push	dx
 009E				rtloop:
 009E  BA 03DA				mov		dx,3dah
 00A1  EC				in		al,dx
 00A2  24 08				and		al,8
 00A4  75 04				jnz		got_retrace
 00A6  50				push	ax
 00A7  58				pop		ax
 00A8  EB F4				jmp		rtloop
 00AA				got_retrace:
 00AA  5A				pop		dx
 00AB  58				pop		ax
 00AC  C3				ret

				;*****************************************************************************
				;  waitBlankEnd
				;  	 inputs: nothing
				;	 returns: nothing
				;*****************************************************************************
				public waitBlankEnd
 00AD				waitBlankEnd:
 00AD  50				push	ax
 00AE  52				push	dx
 00AF				blkloop:
 00AF  BA 03DA				mov		dx,3dah
 00B2  EC				in		al,dx
 00B3  24 09				and		al,9
 00B5  74 04				jz		got_blank
 00B7  50				push	ax
 00B8  58				pop		ax
 00B9  EB F4				jmp		blkloop
 00BB				got_blank:
 00BB  5A				pop		dx
 00BC  58				pop		ax
 00BD  C3				ret

				;*****************************************************************************
				;  vbeSetDisplayStart
				;  	 inputs: AX = pixel
				;            BX = line
				;	 returns: 
				;*****************************************************************************
				public vbeSetDisplayStart
 00BE				vbeSetDisplayStart:
 00BE  50				push	ax
 00BF  53				push	bx
 00C0  51				push	cx
 00C1  52				push	dx
					
 00C2  8B D3				mov		dx,bx
 00C4  8B C8				mov		cx,ax
 00C6  BB 0000				mov		bx,0
 00C9  B8 4F07				mov		ax,4f07h
 00CC  CD 10				int		10h
 00CE  83 F8 4F				cmp		ax,004fh
 00D1  5A				pop		dx
 00D2  59				pop		cx
 00D3  5B				pop		bx
 00D4  58				pop		ax
 00D5  C3				ret
				;*****************************************************************************
				;  memset
				;  	 inputs: ES:DI mem pointer
				;			 BX = fill value
				;            CX = count
				;	 returns zero if ok
				;*****************************************************************************
				public memset
 00D6				memset:
 00D6  50				push	ax
 00D7  53				push	bx
 00D8  51				push	cx
 00D9  06				push	es
 00DA  57				push	di

 00DB  8B C3				mov		ax,bx
 00DD  F3/ AA				rep stosb

 00DF  5F				pop		di
 00E0  07				pop		es
 00E1  59				pop		cx											   
 00E2  5B				pop		bx
 00E3  58				pop		ax
 00E4  C3				ret

				if 0
				endif


 00E5				_Text ENDS
					END	

Microsoft (R) Macro Assembler Version 6.11		    06/17/05 15:51:28
vgutl.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

MODEINFO . . . . . . . . . . . .	 0100
  modeattributes . . . . . . . .	 0000	     Word
  winaattributes . . . . . . . .	 0002	     Byte
  winbattributes . . . . . . . .	 0003	     Byte
  wingranularity . . . . . . . .	 0004	     Word
  winsize  . . . . . . . . . . .	 0006	     Word
  winasegment  . . . . . . . . .	 0008	     Word
  winbsegment  . . . . . . . . .	 000A	     Word
  winfuncptr . . . . . . . . . .	 000C	     DWord
  bytesperscanline . . . . . . .	 0010	     Word
  xresolution  . . . . . . . . .	 0012	     Word
  yresolution  . . . . . . . . .	 0014	     Word
  xcharsize  . . . . . . . . . .	 0016	     Byte
  ycharsize  . . . . . . . . . .	 0017	     Byte
  numberofplanes . . . . . . . .	 0018	     Byte
  bitsperpixel . . . . . . . . .	 0019	     Byte
  numberofbanks  . . . . . . . .	 001A	     Byte
  memorymodel  . . . . . . . . .	 001B	     Byte
  banksize . . . . . . . . . . .	 001C	     Byte
  numberofimagepages . . . . . .	 001D	     Byte
  reserved1  . . . . . . . . . .	 001E	     Byte
  redmasksize  . . . . . . . . .	 001F	     Byte
  redfieldposition . . . . . . .	 0020	     Byte
  greenmasksize  . . . . . . . .	 0021	     Byte
  greenfieldposition . . . . . .	 0022	     Byte
  bluemasksize . . . . . . . . .	 0023	     Byte
  bluefieldposition  . . . . . .	 0024	     Byte
  rsvdmasksize . . . . . . . . .	 0025	     Byte
  rsvdfieldposition  . . . . . .	 0026	     Byte
  directcolormodeinfo  . . . . .	 0027	     Byte
  physbaseptr  . . . . . . . . .	 0028	     DWord
  offscreenmemoffset . . . . . .	 002C	     DWord
  offscreenmemsize . . . . . . .	 0030	     Word
  reserved2  . . . . . . . . . .	 0032	     Byte
VBEINFO  . . . . . . . . . . . .	 0200
  vbesignature . . . . . . . . .	 0000	     Byte
  vbeversion . . . . . . . . . .	 0004	     Word
  oemstringptr . . . . . . . . .	 0006	     DWord
  capabilities . . . . . . . . .	 000A	     Byte
  videomodeptr . . . . . . . . .	 000E	     DWord
  totalmemory  . . . . . . . . .	 0012	     Word
  oemsoftwarerev . . . . . . . .	 0014	     Word
  oemvendornameptr . . . . . . .	 0016	     DWord
  oemproductnameptr  . . . . . .	 001A	     DWord
  oemproductrevptr . . . . . . .	 001E	     DWord
  reserved . . . . . . . . . . .	 0022	     Byte
  oemdata  . . . . . . . . . . .	 0100	     Byte
VGACOLOR . . . . . . . . . . . .	 0006
  red  . . . . . . . . . . . . .	 0000	     Word
  green  . . . . . . . . . . . .	 0002	     Word
  blue . . . . . . . . . . . . .	 0004	     Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

_Text  . . . . . . . . . . . . .	16 Bit	 00E5	  Para	  Public  


Symbols:

                N a m e                 Type     Value    Attr

badparm  . . . . . . . . . . . .	L Near	 0044	  _Text	
blkloop  . . . . . . . . . . . .	L Near	 00AF	  _Text	
got_blank  . . . . . . . . . . .	L Near	 00BB	  _Text	
got_retrace  . . . . . . . . . .	L Near	 00AA	  _Text	
iowait . . . . . . . . . . . . .	L Near	 004A	  _Text	
iwlp . . . . . . . . . . . . . .	L Near	 004F	  _Text	
memset . . . . . . . . . . . . .	L Near	 00D6	  _Text	Public
rtloop . . . . . . . . . . . . .	L Near	 009E	  _Text	
setpalloop . . . . . . . . . . .	L Near	 002B	  _Text	
vbeGetInfo . . . . . . . . . . .	L Near	 006D	  _Text	Public
vbeGetModeInfo . . . . . . . . .	L Near	 007C	  _Text	Public
vbeGetMode . . . . . . . . . . .	L Near	 0057	  _Text	Public
vbeSetBankAddr . . . . . . . . .	L Near	 008B	  _Text	Public
vbeSetDisplayStart . . . . . . .	L Near	 00BE	  _Text	Public
vbeSetMode . . . . . . . . . . .	L Near	 0062	  _Text	Public
vgaSetPalette  . . . . . . . . .	L Near	 0000	  _Text	Public
waitBlankEnd . . . . . . . . . .	L Near	 00AD	  _Text	Public
waitRetrace  . . . . . . . . . .	L Near	 009C	  _Text	Public

	   0 Warnings
	   0 Errors
