Microsoft (R) Macro Assembler Version 6.11		    06/17/05 15:51:28
PartUtl.asm						     Page 1 - 1


				;*****************************************************************************
				;  Partutl
				;  Copyright, 2005 Greg Honsa
				;*****************************************************************************
				 include pte.inc
			      C ;***********************************************************
			      C ;  Copyright 2005 Greg Honsa
			      C ;
			      C ;***********************************************************
			      C 
 = 0001			      C BOOTABLE equ 1			; set to make a bootable image
			      C OPSIZ macro
			      C 	db 66h
			      C endm
			      C 
			      C ;
			      C ;** fat type byte defs
			      C ;
 = 0001			      C FAT12 	equ 01h 	;FAT12 primary parttion (fewer than 32,680 sectors in the volume) 
 = 0002			      C XENIXR	equ 02h		;Xenix root
 = 0003			      C XENIXU  equ 03h		;Xenix usr
 = 0004			      C FAT16 	equ 04h 	;FAT16 partition or logical drive ( 16 MB) 
 = 0005			      C EXTEND  equ 05h 	;Extended partition 
 = 0006			      C BGFAT16	equ 06h		;BIGDOS FAT16 partition or logical drive (33 mb)  
 = 0007			      C NTFS	equ 07h		;Installable File System (NTFS partition or logical drive) 
 = 0008			      C AIXBOOT equ 08h		;AIX boot partition
 = 0009			      C AIXDATA equ 09h		;AIX data
 = 000A			      C OS2BOOT equ	0Ah		;OS/2 boot partition
 = 000B			      C FAT32	equ 0Bh		;FAT32 partition or logical drive 
 = 000C			      C BFAT32	equ 0Ch		;FAT32 partition or logical drive using BIOS INT 13h extensions 
 = 000E			      C BFAT16	equ 0Eh 	;BIGDOS FAT16 partition or logical drive using BIOS INT 13h extensions 
 = 000F			      C BEXTEND equ 0Fh		; Extended partition using BIOS INT 13h extensions 
 = 0012			      C EISA	equ 12h 	;EISA partition or OEM partition 
 = 0042			      C DYNVOL	equ 42h 	;Dynamic volume 
 = 0082			      C LINUXSW equ 82h		;Linux swap partition
 = 0083			      C LINUXRT equ 83h		;Linux native partition
 = 0084			      C POWMAN  equ 84h 	;Power management hibernation partition 
 = 0086			      C MDFAT16	equ 86h 	;Multidisk FAT16 volume created by using Windows NT 4.0 
 = 0087			      C MDNTFS  equ 87h 	;Multidisk NTFS volume created by using Windows NT 4.0 
 = 00A0			      C HIB		equ 0A0h 	;Laptop hibernation partition 
 = 00DE			      C DELL	equ 0DEh 	;Dell OEM partition 
 = 00FE			      C IBM		equ 0FEh 	;IBM OEM partition 
 = 00EE			      C GPT		equ 0EEh 	;GPT partition  
 = 00EF			      C EFI		equ 0EFh 	;EFI System partition on an MBR disk 
			      C 
 = 0080			      C PTE_BOOTABLE EQU 80h
 = 00AA			      C PTE_EXTENDED EQU 0AAh
			      C CYLSEC record Cylinder:10,Sector:6
			      C 
 0010			      C PARTITION_TABLE_ENTRY struc
 0000  00		      C 	bte_bootable		db	?
 0001  00		      C 	bte_starthead		db	?
 0002  0000		      C 	bte_startsector		dw	?	     
 0004  00		      C 	bte_system			db	?
 0005  00		      C 	bte_endhead			db	?
 0006  0000		      C 	bte_endsector		dw	?
 0008  00000000		      C 	bte_relativesector	dd	?
 000C  00000000		      C 	bte_totalsector		dd	?
			      C PARTITION_TABLE_ENTRY ends
			      C 
 001A			      C EXT_PARTITION struc
 0000  00 00 0000 00 00	      C   	EPpte		PARTITION_TABLE_ENTRY <>
       0000 00000000
       00000000
 0010  00000000		      C 	EPStartLBA			dd ?
 0014  00000000		      C 	EPEndLBA			dd ?
 0018  00		      C 	EPbootable			db ?
 0019  00		      C 	EPDrive				db ?
			      C EXT_PARTITION ends
			      C 
 0083			      C PARTITION_INFO struc
 0000  00 00 0000 00 00	      C   	PIpte		PARTITION_TABLE_ENTRY <>
       0000 00000000
       00000000
 0010  00000000		      C 	PIStartLBA			dd ?
 0014  00000000		      C 	PIEndLBA			dd ?
 0018  00		      C 	PIbootable			db ?
 0019  00		      C 	PIDrive				db ?
 001A  00		      C 	PIExtended			db ?
 001B  0004 [		      C    	PIEParts			EXT_PARTITION 4 DUP(<>)
        00 00 0000 00 00
        0000 00000000
        00000000 00000000
        00000000 00 00
       ]
			      C PARTITION_INFO	ends
			      C ;
			      C ;--- drive info
			      C ;
 = 0055			      C DIEXTENDED		equ	055h
 0223			      C DriveInfo	STRUC
 0000  00		      C 	DIid			db	?
 0001  00		      C 	DIHeads			db	?		
 0002  00		      C 	DIExtend		db	?
 0003  00		      C 	DISectors		db	?
 0004  00		      C 					db	?
 0005  0000		      C 	DICylinders		dw  ?
 0007  00000000		      C 	DIFreeSect		dd	?
 000B  00000000		      C 	DITotSect		dd	?
 000F  00000000		      C    	DIExtSize1		dd  ?
 0013  00000000		      C    	DIExtSize		dd  ?
 0017  0004 [		      C    	DIPartTab1		PARTITION_INFO 4 DUP (<>)
        00 00 0000 00 00
        0000 00000000
        00000000 00000000
        00000000 00 00 00
        0004 [
	 00 00 0000 00 00
	 0000 00000000
	 00000000
	 00000000
	 00000000 00 00
	]
			      C 
			      C DriveInfo	ENDS
			      C ;
			      C ; --- BIOS disk parameter table ---
			      C ;
 0010			      C BiosDrvTab	STRUC
 0000  0000		      C 	BDTCylinders	dw	?
 0002  00		      C 	BDTHeads		db	?
 0003  0000		      C 					dw	?
 0005  0000		      C 	BDTPrecomp		dw	?
 0007  00		      C 	BDTECC			db	?
 0008  00		      C 	BDTCtrl			db	?
 0009  00		      C 					db	?
 000A  0000		      C 					dw	?
 000C  0000		      C 	BDTLanding		dw	?
 000E  00		      C 	BDTSectors		db	?
 000F  00		      C 					db	?		
			      C BiosDrvTab ENDS
			      C ;
			      C ; --- BIOS extended disk parameter table
			      C ;
 001E			      C ExtBiosDrvTab STRUC
 0000  0000		      C 	EBDTBuffSz		dw	?
 0002  0000		      C 	EBDTInfo		dw	?
 0004  00000000		      C 	EBDTCylinders	dd	?
 0008  00000000		      C 	EBDTHeads		dd	?
 000C  00000000		      C 	EBDTSectors		dd	?
 0010  00000000		      C 	EBDTTotSect 	dd	?
 0014  00000000		      C 	EBDTTotSect1	dd	?
 0018  0000		      C 	EBDTSectTrk		dw	?
 001A  00000000		      C 	EBDTEDD			dd	?				   	
			      C ExtBiosDrvTab ENDS
			      C ;
			      C ;  --- entended disk address packet
			      C ;
 0018			      C ExtBiosDiskAddrPkt STRUC
 0000  00		      C 	EBDAPSz			db	?
 0001  00		      C 	EBDAPres1		db	?
 0002  00		      C 	EBDAPBlocks		db	?
 0003  00		      C 	EBDAPres2		db	?
 0004  0000		      C 	EBDAPLowPtr		dw	?
 0006  0000		      C 	EBDAPHighPtr	dw	?
 0008  00000000		      C 	EBDAPLBAlow		dd	?
 000C  00000000		      C 	EBDAPLBAhigh	dd	?
 0010  00000000		      C 	EBDAPFlatAdr1	dd	?
 0014  00000000		      C 	EBDAPFlatAdr2	dd	?
			      C ExtBiosDiskAddrPkt ENDS
			      C 	
			      C ;
			      C ; --- vesa info
			      C ;
 0200			      C VgaInfoBlock    STRUC
 0000   0001 [		      C       VESASignature   db   'VESA'      ; 4 signature bytes 
	 56 45 53 41
	]
 0004  0000		      C       VESAVersion     dw   ?           ; VESA version number
 0006  00000000		      C       OEMStringPtr    dd   ?           ; Pointer to OEM string
 000A   0004 [		      C       Capabilities    db   4 dup(?)    ; capabilities of the video environment
	 00
	]
 000E  00000000		      C       VideoModePtr    dd   ?           ; pointer to supported Super VGA modes
 0012  0000		      C       TotalMemory     dw   ?           ; Number of 64kb memory blocks on board
 0014   00EC [		      C       Reserved        db   236 dup(?)  ; Remainder of VgaInfoBlock
	 00
	]
 0100   0100 [		      C 	  OemData		  db   256 dup(?)  ;
	 00
	]
			      C VgaInfoBlock    ENDS
			      C 
				 include diskbuff.inc
			      C ;*****************************************************************************
			      C ;  DiskBuff
			      C ;  Copyright, 2005 Greg Honsa
			      C ;*****************************************************************************
			      C ; Always link last, this is not loaded from disk
			      C ;
			      C ;   --- dskbuffer - used for primary partitions ---
			      C ;
			      C extrn dskbuffer:near ptr byte
			      C extrn pte0:near
			      C extrn pte1:near
			      C extrn pte2:near
			      C extrn pte3:near
			      C 
			      C extrn dskbuffer1:near ptr byte 
			      C extrn pte10:near
			      C extrn pte11:near
			      C extrn pte12:near
			      C extrn pte13:near
			      C extrn ptsig:near ptr word
			      C 
			      C extrn dskbuffer2:near
			      C extrn ptsig2:near ptr word 
			      C  
			      C 
				 include DispUtl.inc
			      C  include vcontex.inc
			      C ;***********************************************************
			      C ;  Copyright 2005 Greg Honsa
			      C ;
			      C ;***********************************************************
			      C  include video.inc
			      C ;***********************************************************
			      C ;  Copyright 2005 Greg Honsa
			      C ;
			      C ;***********************************************************
			      C 
			      C 
 0200			      C VBEINFO struc
 0000   0001 [		      C    vbesignature 	db "VESA"		; // VBE Signature
	 56 45 53 41
	]
 0004  0000		      C    vbeversion		dw	?        	; // VBE Version
 0006  00000000		      C    oemstringptr 	dd	?			; // Pointer to OEM String
 000A   0004 [		      C    capabilities  	db 4 dup (?)   	; // Capabilities of graphics cont.
	 00
	]
 000E  00000000		      C    videomodeptr 	dd	? 			; // Pointer to Video Mode List
 0012  0000		      C    totalmemory		dw	?			; // number of 64Kb memory blocks
 0014  0000		      C    oemsoftwarerev	dw	?			; // VBE implementation Software revision
 0016  00000000		      C    oemvendornameptr	dd	?			; // Pointer to Vendor Name String
 001A  00000000		      C    oemproductnameptr dd	?			; // Pointer to Product Name String
 001E  00000000		      C    oemproductrevptr	dd	?			; // Pointer to Product Revision String
 0022   00DE [		      C    reserved 		db 222 dup (?)			; // Reserved for VBE implementation scratch area
	 00
	]
 0100   0100 [		      C    oemdata			db 256 dup (?)	; // Data Area for OEM Strings
	 00
	]
			      C VBEINFO	ends
			      C 
 0100			      C MODEINFO struc
			      C 
			      C    ;// Mandatory information for all VBE revision
			      C 
 0000  0000		      C    modeattributes	dw	?			; // Mode attributes
 0002  00		      C    winaattributes	db	?			; // Window A attributes
 0003  00		      C    winbattributes	db	?			; // Window B attributes
 0004  0000		      C    wingranularity	dw	?			; // Window granularity
 0006  0000		      C    winsize			dw	?			; // Window size
 0008  0000		      C    winasegment		dw	?			; // Window A start segment
 000A  0000		      C    winbsegment		dw	?			; // Window B start segment
 000C  00000000		      C    winfuncptr		dd	?			; // pointer to window function
 0010  0000		      C    bytesperscanline	dw	?			; // Bytes per scan line
			      C 
			      C    ;// Mandatory information for VBE 1.2 and above
			      C 
 0012  0000		      C    xresolution		dw	?			; // Horizontal resolution in pixel or chars
 0014  0000		      C    yresolution		dw	?			; // Vertical resolution in pixel or chars
 0016  00		      C    xcharsize		db	?			; // Character cell width in pixel
 0017  00		      C    ycharsize		db	?			; // Character cell height in pixel
 0018  00		      C    numberofplanes	db	?			; // Number of memory planes
 0019  00		      C    bitsperpixel		db	?			; // Bits per pixel
 001A  00		      C    numberofbanks	db	?			; // Number of banks
 001B  00		      C    memorymodel		db	?			; // Memory model type
 001C  00		      C    banksize			db	?			; // Bank size in KB
 001D  00		      C    numberofimagepages db ?			; // Number of images
 001E  00		      C    reserved1		db	?			; // Reserved for page function
			      C 
			      C    ;// Direct Color fields (required for direct/6 and YUV/7 memory models)
			      C 
 001F  00		      C    redmasksize		db	?			; // Size of direct color red mask in bits
 0020  00		      C    redfieldposition	db	?			; // Bit position of lsb of red bask
 0021  00		      C    greenmasksize	db	?			; // Size of direct color green mask in bits
 0022  00		      C    greenfieldposition db	?		; // Bit position of lsb of green bask
 0023  00		      C    bluemasksize		db	?			; // Size of direct color blue mask in bits
 0024  00		      C    bluefieldposition db ?			; // Bit position of lsb of blue bask
 0025  00		      C   rsvdmasksize		db	?			; // Size of direct color reserved mask in bits
 0026  00		      C    rsvdfieldposition db	?			; // Bit position of lsb of reserved bask   
 0027  00		      C    directcolormodeinfo db ?			; // Direct color mode attributes
			      C 
			      C    ;// Mandatory information for VBE 2.0 and above
			      C 
 0028  00000000		      C    physbaseptr		dd	?			; // Physical address for flat frame buffer
 002C  00000000		      C    offscreenmemoffset dd ?			; // Pointer to start of off screen memory
 0030  0000		      C    offscreenmemsize dw ?			; // Amount of off screen memory in 1Kb units
 0032   00CE [		      C    reserved2 db 206 dup (?)			; // Remainder of ModeInfoBlock
	 00
	]
			      C 
			      C MODEINFO ends
			      C 
 0006			      C VGACOLOR struc
 0000  0000		      C     red		dw	?
 0002  0000		      C     green	dw	?
 0004  0000		      C     blue	dw	?
			      C VGACOLOR ends
			      C 
			      C 
			      C 
			      C 
 0338			      C VDCONTX	struc
			      C 	;
			      C 	;	--- function pointers --- 
			      C 	;
 0000  0000		      C 	Create			dw	?	; Create function pointer
 0002  0000		      C 	Destroy			dw	?	; Destroy function
 0004  0000		      C 	Clear			dw	?	;
 0006  0000		      C 	getNumPages		dw	?	;
 0008  0000		      C     setActivePage	dw	?	;  
 000A  0000		      C     setVisiblePage	dw	?	;
 000C  0000		      C     pixel			dw	?	;	(int16 x, int16 y, int16 color);
 000E  0000		      C     fillRect		dw	?	;  (int16 x, int16 y, int16 width, int16 height, int16 color);
 0010  0000		      C 	drawRect		dw	?
 0012  0000		      C 	drawChar		dw	?	;	
 0014  0000		      C 	drawLine		dw	?	;
 0016  0000		      C 	drawString		dw	?	;
 0018  0000		      C 	createWindow	dw	?	;
 001A  0000		      C 	createbutton	dw	?	;
			      C 
 001C   0001 [		      C 	vbi			VBEINFO <>
	 56 45 53 41
	] 0000 00000000
        0004 [
	 00
	] 00000000 0000
        0000 00000000
        00000000 00000000
        00DE [
	 00
	]
        0100 [
	 00
	]
 021C  0000 00 00 0000	      C 	vmi 		MODEINFO <>
        0000 0000 0000
        00000000 0000
        0000 0000 00 00
        00 00 00 00 00 00
        00 00 00 00 00 00
        00 00 00 00
        00000000 00000000
        0000
        00CE [
	 00
	]
 031C  0000		      C 	origMode		dw	?	;
 031E  0000		      C 	currentMode		dw	?	;
 0320  0000		      C 	currentBank		dw	?	;
 0322  0000		      C 	banksPerPage	dw	?	;
 0324  0000		      C 	activePage		dw	?	;
 0326  0000		      C 	activePageOffset dw ?	;
 0328  0000		      C 	visiblePage		dw	?	;
 032A  0000		      C 	error			dw	?	;
 032C  0000		      C 	maxx			dw	?	;
 032E  0000		      C 	maxy			dw	?	;
 0330  0000		      C 	vwidth			dw	?	;
 0332  0000		      C 	vheight			dw	?	;
 0334  0000		      C 	fontSeg			dw	?
 0336  0000		      C 	fontOff			dw	?
			      C VDCONTX ends
			      C 
			      C 
			      C 
 0014			      C GWIND	struc
 0000  0000		      C 	xorg	dw	?			; x start
 0002  0000		      C 	yorg	dw	?			; ystart
 0004  0000		      C 	xend	dw	?
 0006  0000		      C 	yend	dw	?
 0008  0000		      C 	xsiz	dw	?			; size x
 000A  0000		      C 	ysiz	dw	?			; size y
 000C  0000		      C 	bcolor	dw	?			; background window color
 000E  0000		      C 	ccolor	dw	?			; character color
 0010  0000		      C 	currx	dw	?			; current character position
 0012  0000		      C 	curry	dw	?
			      C GWIND	ends
			      C 
			      C 
			      C ;
			      C ;
			      C ;
			      C extrn init_vid:near
			      C extrn kill_vid:near
			      C extrn printChar:near
			      C extrn printHexNibble:near
			      C extrn printHexByte:near
			      C extrn printHexWord:near
			      C extrn printHexDWord:near
			      C extrn println:near
			      C extrn print_size:near
			      C extrn showZero:near
			      C extrn GetChar:near
			      C extrn GetLine:near
			      C extrn GetNextParam:near
			      C extrn ascii2hex:near
			      C extrn displayBuffer:near
			      C extrn gwDrives:near
			      C extrn vidcontext:near
			      C extrn activeWindow:near
			      C extrn init_command:near
			      C extrn init_sector:near
			      C 
				 include error.inc
			      C ;***********************************************************
			      C ;  Copyright 2005 Greg Honsa
			      C ;
			      C ;***********************************************************
			      C 
 = 0090			      C CPERR_TAB 		equ 90h
 = 0091			      C CPERR_SPACE 	equ 91h
 = 0092			      C CPERR_CSPACE 	equ 92h
 = 0093			      C CPERR_VERIFY	equ 93h
 = 0094			      C CPERR_COMMIT	equ	94h
			      C 

 0000				_Text SEGMENT PUBLIC USE16
				  assume CS:_Text, DS:_Text
														   
				extrn ReadSectExt:near
				extrn WriteSectExt:near
				extrn VerfSectExt:near
				extrn LBA2CHS:near

				public PTFindFree
				.386
				;*****************************************************************************
				;   PTFindFree - find free partition table entry in DriveInfo struct
				;       inputs: DI -> DriveInfo
				;		output: BX -> free PARTITION_INFO struct
				;		`		   =  NULL if no free entries
				;*****************************************************************************

 0000				PTFindFree:
 0000  66| 50					push	eax
 0002  51					push	cx
 0003  B9 0004					mov		cx,4
 0006  8B C7					mov		ax,di
 0008  83 C0 17					add		ax,(sizeof DriveInfo - (4 * sizeof PARTITION_INFO))
 000B  8B D8					mov		bx,ax 
					assume BX:ptr PARTITION_INFO
 000D				cploop1:
 000D  66| 8B 47 0C				mov		eax,[bx].PIpte.bte_totalsector
 0011  66| 0B C0				or		eax,eax
 0014  74 09					jz		partspace
 0016  81 C3 0083				add 	bx,sizeof PARTITION_INFO
 001A  E2 F1					loop	cploop1
 001C  BB 0000					mov		bx,0
 001F				partspace:
 001F  59					pop		cx
 0020  66| 58					pop		eax
 0022  C3					ret
				;*****************************************************************************
				;   PTGetUsedT -  Sort the partition tables by starting addr
				;	   input: DI ->DriveInfo containing 
				;	   output:SI ->List of in use partitions 
				;
				;*****************************************************************************
				public PTGetUsed
 0023   0005 [			tmptab	dw	5 dup (0)						; tmp table used while we sort the
	 0000
	]
															; existing partitions by start adr.
 002D				PTGetUsed:
 002D  57			 		push	di			; 
 002E  51					push	cx
 002F  66| 50					push	eax

 0031  8B F7					mov		si,di
 0033  83 C6 17					add		si,(sizeof DriveInfo - (4 * sizeof PARTITION_INFO))
					  assume si:ptr PARTITION_INFO
 0036  B9 0004					mov		cx,4
 0039  BF 0023 R				mov		di,offset tmptab
 003C				ckptblp:
					
 003C  66| 8B 44 0C				mov		eax,[si].PIpte.bte_totalsector
 0040  66| 0B C0				or		eax,eax			; skip if also free
 0043  74 04					jz		skus
				;      -- si -> a valid partition table entry
 0045  89 35					mov		word ptr[di],si
 0047  47					inc		di
 0048  47					inc		di
 0049				skus:
 0049  81 C6 0083				add		si,sizeof PARTITION_INFO
 004D  E2 ED					loop	ckptblp
 004F  BE 0023 R				mov		si,offset tmptab
 0052  66| 58					pop		eax
 0054  59					pop		cx
 0055  5F					pop		di
 0056  C3					ret
						
				;*****************************************************************************
				; sortpTabs  Sorts table of Partition tables by start LBA
				;     input: SI -> array of pointers to PARTITION_TABLE_ENTRY's
				;	  output: nothing, table sorted...	 
				;
				;*****************************************************************************
				public PTSort

 0057				PTSort:
 0057  57					push	di
 0058  53					push	bx
 0059  66| 50					push	eax
 005B  51					push	cx
 005C  56					push	si

 005D				sortptablp0:
 005D  5E					pop		si
 005E  56					push	si
 005F  B9 0000					mov		cx,0
						assume si:ptr word
 0062  8B 1C					mov		bx,[si]
 0064  0B DB					or		bx,bx
 0066  74 26					jz		sortpTabsDone	; if the table s empty on start then exit
 0068  83 C6 02					add		si,2			; next elenemt
 006B				sortptablp1:
 006B  8B 3C					mov		di,[si]			;  get pointer
 006D  0B FF					or		di,di			; if 0 end of list
 006F  74 19					jz		sptabl1pdone

						assume di:ptr PARTITION_INFO
 0071  66| 8B 47 10				mov		eax,[bx].PIStartLBA	; previous element
 0075  66| 3B 45 10				cmp		eax,[di].PIStartLBA	; curent element
 0079  72 08					jb		sptnoswap
						;						swap elements
 007B  89 3C					mov		[si],di
 007D  89 5C FE					mov		[si-2],bx
 0080  B9 0055					mov		cx,55h			; set swapped flag
 0083				sptnoswap:
 0083  8B DE					mov		bx,si
 0085  83 C6 02					add		si,2
 0088  EB E1					jmp		sortptablp1
 008A				sptabl1pdone:
 008A  0A C9					or		cl,cl
 008C  75 CF					jnz		sortptablp0
 008E				sortpTabsDone:
 008E  5E					pop		si
 008F  59					pop		cx
 0090  66| 58					pop		eax
 0092  5B					pop		bx
 0093  5F					pop		di
 0094  C3					ret
				;*****************************************************************************
				; GetStartLBA  di-> DriveInfo
				;              si-> sorted pointers to ptabs
				;			  edx size needed
				;
				;   returns: eax = Starting LBA
				;
				;*****************************************************************************
				public PTGetStartLBA
 0095				PTGetStartLBA:
 0095  56					push	si
 0096  57					push	di
						;
						; special case for lowest check if room below
						; 		
 0097  8B 3C					mov		di,[si]			; get lowset partition
 0099  83 C6 02					add		si,2		
					  assume di:ptr PARTITION_INFO
 009C  66| 8B 45 10				mov		eax,[di].PIStartLBA
 00A0  66| 83 F8 5A				cmp		eax,90
 00A4  7C 09					jl		nxt
 00A6  66| 2B C2				sub		eax,edx
 00A9  7C 04					jl		nxt
 00AB  66| 48					dec		eax		; for fun
						;eax has starting lba
 00AD  EB 4C					jmp		found_space

 00AF				nxt:	; here di ->current ptable, si->next ptable ptr
						;
						; --- now we look for space between partitions if any...
						;
 00AF  66| 8B 45 14				mov		eax,[di].PIEndLBA
 00B3  8B 3C					mov		di,[si]
 00B5  0B FF					or		di,di
 00B7  74 12					jz		ckend
 00B9  66| 2B 45 10				sub		eax,[di].PIStartLBA		; see if space between partitions
 00BD  66| 83 E8 02				sub		eax,2					; leave 1 sector buffer on each side 
 00C1  66| 3B C2				cmp		eax,edx
 00C4  7F 27					jg		gotit
 00C6  83 C6 02					add		si,2
 00C9  EB E4					jmp		nxt
 00CB				ckend:
						;   check if we have space a end of drive
						;
 00CB  83 EE 02					sub		si,2		; get back last one
 00CE  8B 3C					mov		di,[si]
 00D0  66| 8B 45 14				mov		eax,[di].PIEndLBA

 00D4  5E					pop		si
 00D5  56					push	si			; get driveinfo
					assume si:ptr DriveInfo
 00D6  66| 40					inc		eax
 00D8  66| 50					push	eax
 00DA  66| 03 C2				add		eax,edx
					
 00DD  66| 3B 44 0B				cmp		eax,[si].DITotSect
 00E1  66| 58					pop		eax
 00E3  7F 13					jg		noroom
 00E5  66| 8B 45 14				mov		eax,[di].PIEndLBA
 00E9  66| 40					inc		eax
 00EB  EB 0E					jmp		found_space
 00ED				gotit:
						; get back endlba from previous entry
 00ED  83 EE 02					sub		si,2
 00F0  66| 8B 45 14				mov		eax,[di].PIEndLBA
 00F4  66| 40					inc		eax
 00F6  EB 03					jmp		found_space
 00F8				noroom:
 00F8  66| 33 C0				xor		eax,eax

 00FB				found_space:
 00FB  5F					pop		di
 00FC  5E					pop		si
 00FD  C3					ret
				 
				;*****************************************************************************
				; PTVerify
				;		inputs: eax has starting lba
				;               edx has size
				;       		di ->DriveInfo
				;		output:	returns carry if error
				;*****************************************************************************
				public PTVerify
 00FE				PTVerify:
					   assume di:ptr DriveInfo
 00FE  66| 50					push	eax
 0100  66| 52					push	edx			; save origional size
 0102				vsloop:
 0102  56					push	si
 0103  BE 0136 R				mov		si,offset verifys
 0106  E8 0000 E				call	println
 0109  5E					pop		si

 010A  50					push	ax
 010B  51					push	cx
 010C  B9 000A					mov		cx,10
 010F  E8 0000 E				call	print_size
 0112  59					pop		cx
 0113  B0 0D					mov		al,0dh
 0115  E8 0000 E				call	PrintChar
 0118  58					pop		ax

 0119  66| 52					push	edx
 011B  66| BA 00000000				mov		edx,0
 0121  8A 0D					mov		cl,[di].DIid
 0123  E8 0000 E				call	verfSectExt
 0126  66| 5A					pop		edx
						
 0128  72 07					jc		vfailed
 012A  66| 40					inc		eax
 012C  66| 4A					dec		edx
 012E  7F D2					jg		vsloop	
 0130  F8				   	clc
 0131				vfailed:
 0131  66| 5A					pop		edx
 0133  66| 58					pop		eax
 0135  C3					ret
 0136 56 65 72 69 66 79		verifys	db	"Verify sector ",0
        20 73 65 63 74 6F
        72 20 00
				;*****************************************************************************
				;	PTUpdate
				;	 input: eax has start lba
				;		    edx has size
				;		    bx has the partition table entry
				;		    di-> DriveInfo
				;			cx has type
				;	 output: nothing, tables updated
				;
				;*****************************************************************************
				public PTUpdate
 0145				PTUpdate:
 0145  66| 50					push	eax
 0147  66| 52					push	edx
 0149  51					push	cx

						assume bx:ptr PARTITION_INFO
						;
						; --- set LBA start and size ---
						;
 014A  66| 89 47 10				mov		[bx].PIStartLBA,eax
 014E  66| 89 47 08				mov		[bx].PIpte.bte_relativesector,eax
 0152  66| 89 57 0C				mov		[bx].PIpte.bte_totalsector,edx
						;
						; --- get starting CHS from LBA ---
						;
 0156  66| 52					push	edx
 0158  66| BA 00000000		 		mov		edx,0
						
 015E  53					push	bx
 015F  8B DF					mov		bx,di
 0161  E8 0000 E				call	LBA2CHS
 0164  5B					pop		bx
						
 0165  88 77 01					mov		[bx].PIpte.bte_starthead,dh
 0168  C1 E1 06					shl		cx,6
 016B  0A CA					or		cl,dl
 016D  89 4F 02					mov		[bx].PIpte.bte_startsector,cx
 0170  66| 5A					pop		edx
						
						;
						;  --- set end LBA info
						;

 0172  66| 03 C2				add		eax,edx
 0175  66| 89 47 14				mov		[bx].PIEndLBA,eax
						;
						; --- get ending CHS from LBA ---
						;

 0179  66| 52					push	edx
 017B  66| BA 00000000				mov		edx,0
						
 0181  53					push	bx
 0182  8B DF					mov		bx,di
 0184  E8 0000 E				call	LBA2CHS
 0187  5B					pop		bx
						
 0188  88 77 05					mov		[bx].PIpte.bte_endhead,dh
 018B  C1 E1 06					shl		cx,6
 018E  0A CA					or		cl,dl
 0190  89 4F 06					mov		[bx].PIpte.bte_endsector,cx
 0193  66| 5A					pop		edx
						;
						;  --- upate free info ---
						;
 0195  66| 8B 45 07		  	   	mov		eax,[di].DIFreeSect
 0199  66| 2B C2				sub		eax,edx
 019C  66| 89 45 07				mov		[di].DIFreeSect,eax
 01A0  59					pop		cx			; get back type
 01A1  88 4F 04					mov		[bx].PIpte.bte_system,cl
					
 01A4  66| 5A					pop		edx
 01A6  66| 58					pop		eax
 01A8  C3					ret

				;*****************************************************************************
				;   PTCommit - Commits partition tables to disk
				;		input:	DI-> DriveInfo struct
				;
				;
				;*****************************************************************************
				public PTCommit
 01A9				PTCommit:
 01A9  57					push	di
 01AA  56					push	si
 01AB  66| 50					push	eax
 01AD  66| 52					push	edx
 01AF  51					push	cx
					
 01B0  57					push	di
 01B1  8A 0D					mov		cl,[di].DIid
 01B3  66| 33 D2				xor		edx,edx
 01B6  66| B8 00000000				mov		eax,0
 01BC  BF 0000 E				mov		di,offset dskbuffer
 01BF  E8 0000 E				call	ReadSectExt
 01C2  5F					pop		di

 01C3  72 37					jc		CommitFailed
						;
						;  --- now copy our table entries into the real one
						;
 01C5  8B C7					mov		ax,di
 01C7  83 C0 17					add		ax,(sizeof DriveInfo - (4 * sizeof PARTITION_INFO))
 01CA  8B F0					mov		si,ax 
					
					assume si:ptr PARTITION_INFO

 01CC  57					push	di
 01CD  BF 0000 E				mov		di,offset pte0
 01D0  B9 0004					mov		cx,4
 01D3				wptloop:

				; 
				;   --- copy the table entres from our struct
				;		
 01D3  56					push	si
 01D4  51					push	cx
 01D5  B9 0010					mov		cx,sizeof PARTITION_TABLE_ENTRY
 01D8  F3/ A4				   	rep 	movsb
 01DA  59					pop		cx
 01DB  5E					pop		si
 01DC  8B C6					mov		ax,si
 01DE  05 0083					add		ax,sizeof PARTITION_INFO
 01E1  8B F0					mov		si,ax
 01E3  E2 EE					loop 	wptloop
 01E5  5F					pop		di
						;
						;  --- and write the sector back ---
						;

 01E6  57					push	di
 01E7  8A 0D					mov		cl,[di].DIid
 01E9  66| 33 D2				xor		edx,edx
 01EC  66| B8 00000000				mov		eax,0
 01F2  BF 0000 E				mov		di,offset dskbuffer
 01F5  E8 0000 E				call	WriteSectExt
 01F8  5F					pop		di
 01F9  72 01					jc		CommitFailed
 01FB  F8					clc
 01FC				CommitFailed:
 01FC  59					pop		cx
 01FD  66| 5A					pop		edx
 01FF  66| 58					pop		eax
 0201  5E					pop		si
 0202  5F					pop		di
 0203  C3					ret





 0204				_Text ENDS
					END	 
Microsoft (R) Macro Assembler Version 6.11		    06/17/05 15:51:28
PartUtl.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

OPSIZ  . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

BiosDrvTab . . . . . . . . . . .	 0010
  BDTCylinders . . . . . . . . .	 0000	     Word
  BDTHeads . . . . . . . . . . .	 0002	     Byte
  BDTPrecomp . . . . . . . . . .	 0005	     Word
  BDTECC . . . . . . . . . . . .	 0007	     Byte
  BDTCtrl  . . . . . . . . . . .	 0008	     Byte
  BDTLanding . . . . . . . . . .	 000C	     Word
  BDTSectors . . . . . . . . . .	 000E	     Byte
DriveInfo  . . . . . . . . . . .	 0223
  DIid . . . . . . . . . . . . .	 0000	     Byte
  DIHeads  . . . . . . . . . . .	 0001	     Byte
  DIExtend . . . . . . . . . . .	 0002	     Byte
  DISectors  . . . . . . . . . .	 0003	     Byte
  DICylinders  . . . . . . . . .	 0005	     Word
  DIFreeSect . . . . . . . . . .	 0007	     DWord
  DITotSect  . . . . . . . . . .	 000B	     DWord
  DIExtSize1 . . . . . . . . . .	 000F	     DWord
  DIExtSize  . . . . . . . . . .	 0013	     DWord
  DIPartTab1 . . . . . . . . . .	 0017	      0083
EXT_PARTITION  . . . . . . . . .	 001A
  EPpte  . . . . . . . . . . . .	 0000	      0010
  EPStartLBA . . . . . . . . . .	 0010	     DWord
  EPEndLBA . . . . . . . . . . .	 0014	     DWord
  EPbootable . . . . . . . . . .	 0018	     Byte
  EPDrive  . . . . . . . . . . .	 0019	     Byte
ExtBiosDiskAddrPkt . . . . . . .	 0018
  EBDAPSz  . . . . . . . . . . .	 0000	     Byte
  EBDAPres1  . . . . . . . . . .	 0001	     Byte
  EBDAPBlocks  . . . . . . . . .	 0002	     Byte
  EBDAPres2  . . . . . . . . . .	 0003	     Byte
  EBDAPLowPtr  . . . . . . . . .	 0004	     Word
  EBDAPHighPtr . . . . . . . . .	 0006	     Word
  EBDAPLBAlow  . . . . . . . . .	 0008	     DWord
  EBDAPLBAhigh . . . . . . . . .	 000C	     DWord
  EBDAPFlatAdr1  . . . . . . . .	 0010	     DWord
  EBDAPFlatAdr2  . . . . . . . .	 0014	     DWord
ExtBiosDrvTab  . . . . . . . . .	 001E
  EBDTBuffSz . . . . . . . . . .	 0000	     Word
  EBDTInfo . . . . . . . . . . .	 0002	     Word
  EBDTCylinders  . . . . . . . .	 0004	     DWord
  EBDTHeads  . . . . . . . . . .	 0008	     DWord
  EBDTSectors  . . . . . . . . .	 000C	     DWord
  EBDTTotSect  . . . . . . . . .	 0010	     DWord
  EBDTTotSect1 . . . . . . . . .	 0014	     DWord
  EBDTSectTrk  . . . . . . . . .	 0018	     Word
  EBDTEDD  . . . . . . . . . . .	 001A	     DWord
GWIND  . . . . . . . . . . . . .	 0014
  xorg . . . . . . . . . . . . .	 0000	     Word
  yorg . . . . . . . . . . . . .	 0002	     Word
  xend . . . . . . . . . . . . .	 0004	     Word
  yend . . . . . . . . . . . . .	 0006	     Word
  xsiz . . . . . . . . . . . . .	 0008	     Word
  ysiz . . . . . . . . . . . . .	 000A	     Word
  bcolor . . . . . . . . . . . .	 000C	     Word
  ccolor . . . . . . . . . . . .	 000E	     Word
  currx  . . . . . . . . . . . .	 0010	     Word
  curry  . . . . . . . . . . . .	 0012	     Word
MODEINFO . . . . . . . . . . . .	 0100
  modeattributes . . . . . . . .	 0000	     Word
  winaattributes . . . . . . . .	 0002	     Byte
  winbattributes . . . . . . . .	 0003	     Byte
  wingranularity . . . . . . . .	 0004	     Word
  winsize  . . . . . . . . . . .	 0006	     Word
  winasegment  . . . . . . . . .	 0008	     Word
  winbsegment  . . . . . . . . .	 000A	     Word
  winfuncptr . . . . . . . . . .	 000C	     DWord
  bytesperscanline . . . . . . .	 0010	     Word
  xresolution  . . . . . . . . .	 0012	     Word
  yresolution  . . . . . . . . .	 0014	     Word
  xcharsize  . . . . . . . . . .	 0016	     Byte
  ycharsize  . . . . . . . . . .	 0017	     Byte
  numberofplanes . . . . . . . .	 0018	     Byte
  bitsperpixel . . . . . . . . .	 0019	     Byte
  numberofbanks  . . . . . . . .	 001A	     Byte
  memorymodel  . . . . . . . . .	 001B	     Byte
  banksize . . . . . . . . . . .	 001C	     Byte
  numberofimagepages . . . . . .	 001D	     Byte
  reserved1  . . . . . . . . . .	 001E	     Byte
  redmasksize  . . . . . . . . .	 001F	     Byte
  redfieldposition . . . . . . .	 0020	     Byte
  greenmasksize  . . . . . . . .	 0021	     Byte
  greenfieldposition . . . . . .	 0022	     Byte
  bluemasksize . . . . . . . . .	 0023	     Byte
  bluefieldposition  . . . . . .	 0024	     Byte
  rsvdmasksize . . . . . . . . .	 0025	     Byte
  rsvdfieldposition  . . . . . .	 0026	     Byte
  directcolormodeinfo  . . . . .	 0027	     Byte
  physbaseptr  . . . . . . . . .	 0028	     DWord
  offscreenmemoffset . . . . . .	 002C	     DWord
  offscreenmemsize . . . . . . .	 0030	     Word
  reserved2  . . . . . . . . . .	 0032	     Byte
PARTITION_INFO . . . . . . . . .	 0083
  PIpte  . . . . . . . . . . . .	 0000	      0010
  PIStartLBA . . . . . . . . . .	 0010	     DWord
  PIEndLBA . . . . . . . . . . .	 0014	     DWord
  PIbootable . . . . . . . . . .	 0018	     Byte
  PIDrive  . . . . . . . . . . .	 0019	     Byte
  PIExtended . . . . . . . . . .	 001A	     Byte
  PIEParts . . . . . . . . . . .	 001B	      001A
PARTITION_TABLE_ENTRY  . . . . .	 0010
  bte_bootable . . . . . . . . .	 0000	     Byte
  bte_starthead  . . . . . . . .	 0001	     Byte
  bte_startsector  . . . . . . .	 0002	     Word
  bte_system . . . . . . . . . .	 0004	     Byte
  bte_endhead  . . . . . . . . .	 0005	     Byte
  bte_endsector  . . . . . . . .	 0006	     Word
  bte_relativesector . . . . . .	 0008	     DWord
  bte_totalsector  . . . . . . .	 000C	     DWord
VBEINFO  . . . . . . . . . . . .	 0200
  vbesignature . . . . . . . . .	 0000	     Byte
  vbeversion . . . . . . . . . .	 0004	     Word
  oemstringptr . . . . . . . . .	 0006	     DWord
  capabilities . . . . . . . . .	 000A	     Byte
  videomodeptr . . . . . . . . .	 000E	     DWord
  totalmemory  . . . . . . . . .	 0012	     Word
  oemsoftwarerev . . . . . . . .	 0014	     Word
  oemvendornameptr . . . . . . .	 0016	     DWord
  oemproductnameptr  . . . . . .	 001A	     DWord
  oemproductrevptr . . . . . . .	 001E	     DWord
  reserved . . . . . . . . . . .	 0022	     Byte
  oemdata  . . . . . . . . . . .	 0100	     Byte
VDCONTX  . . . . . . . . . . . .	 0338
  Create . . . . . . . . . . . .	 0000	     Word
  Destroy  . . . . . . . . . . .	 0002	     Word
  Clear  . . . . . . . . . . . .	 0004	     Word
  getNumPages  . . . . . . . . .	 0006	     Word
  setActivePage  . . . . . . . .	 0008	     Word
  setVisiblePage . . . . . . . .	 000A	     Word
  pixel  . . . . . . . . . . . .	 000C	     Word
  fillRect . . . . . . . . . . .	 000E	     Word
  drawRect . . . . . . . . . . .	 0010	     Word
  drawChar . . . . . . . . . . .	 0012	     Word
  drawLine . . . . . . . . . . .	 0014	     Word
  drawString . . . . . . . . . .	 0016	     Word
  createWindow . . . . . . . . .	 0018	     Word
  createbutton . . . . . . . . .	 001A	     Word
  vbi  . . . . . . . . . . . . .	 001C	      0200
  vmi  . . . . . . . . . . . . .	 021C	      0100
  origMode . . . . . . . . . . .	 031C	     Word
  currentMode  . . . . . . . . .	 031E	     Word
  currentBank  . . . . . . . . .	 0320	     Word
  banksPerPage . . . . . . . . .	 0322	     Word
  activePage . . . . . . . . . .	 0324	     Word
  activePageOffset . . . . . . .	 0326	     Word
  visiblePage  . . . . . . . . .	 0328	     Word
  error  . . . . . . . . . . . .	 032A	     Word
  maxx . . . . . . . . . . . . .	 032C	     Word
  maxy . . . . . . . . . . . . .	 032E	     Word
  vwidth . . . . . . . . . . . .	 0330	     Word
  vheight  . . . . . . . . . . .	 0332	     Word
  fontSeg  . . . . . . . . . . .	 0334	     Word
  fontOff  . . . . . . . . . . .	 0336	     Word
VGACOLOR . . . . . . . . . . . .	 0006
  red  . . . . . . . . . . . . .	 0000	     Word
  green  . . . . . . . . . . . .	 0002	     Word
  blue . . . . . . . . . . . . .	 0004	     Word
VgaInfoBlock . . . . . . . . . .	 0200
  VESASignature  . . . . . . . .	 0000	     Byte
  VESAVersion  . . . . . . . . .	 0004	     Word
  OEMStringPtr . . . . . . . . .	 0006	     DWord
  Capabilities . . . . . . . . .	 000A	     Byte
  VideoModePtr . . . . . . . . .	 000E	     DWord
  TotalMemory  . . . . . . . . .	 0012	     Word
  Reserved . . . . . . . . . . .	 0014	     Byte
  OemData  . . . . . . . . . . .	 0100	     Byte


Records:

                N a m e                  Width     # fields
                                         Shift     Width     Mask      Initial

CYLSEC . . . . . . . . . . . . .	 0010	   0002
  Cylinder . . . . . . . . . . .	 0006	   000A	     FFC0     ?
  Sector . . . . . . . . . . . .	 0000	   0006	     003F     ?


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

_Text  . . . . . . . . . . . . .	16 Bit	 0204	  Para	  Public  


Symbols:

                N a m e                 Type     Value    Attr

AIXBOOT  . . . . . . . . . . . .	Number	 0008h	 
AIXDATA  . . . . . . . . . . . .	Number	 0009h	 
BEXTEND  . . . . . . . . . . . .	Number	 000Fh	 
BFAT16 . . . . . . . . . . . . .	Number	 000Eh	 
BFAT32 . . . . . . . . . . . . .	Number	 000Ch	 
BGFAT16  . . . . . . . . . . . .	Number	 0006h	 
BOOTABLE . . . . . . . . . . . .	Number	 0001h	 
CPERR_COMMIT . . . . . . . . . .	Number	 0094h	 
CPERR_CSPACE . . . . . . . . . .	Number	 0092h	 
CPERR_SPACE  . . . . . . . . . .	Number	 0091h	 
CPERR_TAB  . . . . . . . . . . .	Number	 0090h	 
CPERR_VERIFY . . . . . . . . . .	Number	 0093h	 
CommitFailed . . . . . . . . . .	L Near	 01FC	  _Text	
DELL . . . . . . . . . . . . . .	Number	 00DEh	 
DIEXTENDED . . . . . . . . . . .	Number	 0055h	 
DYNVOL . . . . . . . . . . . . .	Number	 0042h	 
EFI  . . . . . . . . . . . . . .	Number	 00EFh	 
EISA . . . . . . . . . . . . . .	Number	 0012h	 
EXTEND . . . . . . . . . . . . .	Number	 0005h	 
FAT12  . . . . . . . . . . . . .	Number	 0001h	 
FAT16  . . . . . . . . . . . . .	Number	 0004h	 
FAT32  . . . . . . . . . . . . .	Number	 000Bh	 
GPT  . . . . . . . . . . . . . .	Number	 00EEh	 
GetChar  . . . . . . . . . . . .	L Near	 0000	  External
GetLine  . . . . . . . . . . . .	L Near	 0000	  External
GetNextParam . . . . . . . . . .	L Near	 0000	  External
HIB  . . . . . . . . . . . . . .	Number	 00A0h	 
IBM  . . . . . . . . . . . . . .	Number	 00FEh	 
LBA2CHS  . . . . . . . . . . . .	L Near	 0000	  _Text	External
LINUXRT  . . . . . . . . . . . .	Number	 0083h	 
LINUXSW  . . . . . . . . . . . .	Number	 0082h	 
MDFAT16  . . . . . . . . . . . .	Number	 0086h	 
MDNTFS . . . . . . . . . . . . .	Number	 0087h	 
NTFS . . . . . . . . . . . . . .	Number	 0007h	 
OS2BOOT  . . . . . . . . . . . .	Number	 000Ah	 
POWMAN . . . . . . . . . . . . .	Number	 0084h	 
PTCommit . . . . . . . . . . . .	L Near	 01A9	  _Text	Public
PTE_BOOTABLE . . . . . . . . . .	Number	 0080h	 
PTE_EXTENDED . . . . . . . . . .	Number	 00AAh	 
PTFindFree . . . . . . . . . . .	L Near	 0000	  _Text	Public
PTGetStartLBA  . . . . . . . . .	L Near	 0095	  _Text	Public
PTGetUsed  . . . . . . . . . . .	L Near	 002D	  _Text	Public
PTSort . . . . . . . . . . . . .	L Near	 0057	  _Text	Public
PTUpdate . . . . . . . . . . . .	L Near	 0145	  _Text	Public
PTVerify . . . . . . . . . . . .	L Near	 00FE	  _Text	Public
ReadSectExt  . . . . . . . . . .	L Near	 0000	  _Text	External
VerfSectExt  . . . . . . . . . .	L Near	 0000	  _Text	External
WriteSectExt . . . . . . . . . .	L Near	 0000	  _Text	External
XENIXR . . . . . . . . . . . . .	Number	 0002h	 
XENIXU . . . . . . . . . . . . .	Number	 0003h	 
activeWindow . . . . . . . . . .	L Near	 0000	  External
ascii2hex  . . . . . . . . . . .	L Near	 0000	  External
ckend  . . . . . . . . . . . . .	L Near	 00CB	  _Text	
ckptblp  . . . . . . . . . . . .	L Near	 003C	  _Text	
cploop1  . . . . . . . . . . . .	L Near	 000D	  _Text	
displayBuffer  . . . . . . . . .	L Near	 0000	  External
dskbuffer1 . . . . . . . . . . .	Word	 0000	  External
dskbuffer2 . . . . . . . . . . .	L Near	 0000	  External
dskbuffer  . . . . . . . . . . .	Word	 0000	  External
found_space  . . . . . . . . . .	L Near	 00FB	  _Text	
gotit  . . . . . . . . . . . . .	L Near	 00ED	  _Text	
gwDrives . . . . . . . . . . . .	L Near	 0000	  External
init_command . . . . . . . . . .	L Near	 0000	  External
init_sector  . . . . . . . . . .	L Near	 0000	  External
init_vid . . . . . . . . . . . .	L Near	 0000	  External
kill_vid . . . . . . . . . . . .	L Near	 0000	  External
noroom . . . . . . . . . . . . .	L Near	 00F8	  _Text	
nxt  . . . . . . . . . . . . . .	L Near	 00AF	  _Text	
partspace  . . . . . . . . . . .	L Near	 001F	  _Text	
printChar  . . . . . . . . . . .	L Near	 0000	  External
printHexByte . . . . . . . . . .	L Near	 0000	  External
printHexDWord  . . . . . . . . .	L Near	 0000	  External
printHexNibble . . . . . . . . .	L Near	 0000	  External
printHexWord . . . . . . . . . .	L Near	 0000	  External
print_size . . . . . . . . . . .	L Near	 0000	  External
println  . . . . . . . . . . . .	L Near	 0000	  External
pte0 . . . . . . . . . . . . . .	L Near	 0000	  External
pte10  . . . . . . . . . . . . .	L Near	 0000	  External
pte11  . . . . . . . . . . . . .	L Near	 0000	  External
pte12  . . . . . . . . . . . . .	L Near	 0000	  External
pte13  . . . . . . . . . . . . .	L Near	 0000	  External
pte1 . . . . . . . . . . . . . .	L Near	 0000	  External
pte2 . . . . . . . . . . . . . .	L Near	 0000	  External
pte3 . . . . . . . . . . . . . .	L Near	 0000	  External
ptsig2 . . . . . . . . . . . . .	Word	 0000	  External
ptsig  . . . . . . . . . . . . .	Word	 0000	  External
showZero . . . . . . . . . . . .	L Near	 0000	  External
skus . . . . . . . . . . . . . .	L Near	 0049	  _Text	
sortpTabsDone  . . . . . . . . .	L Near	 008E	  _Text	
sortptablp0  . . . . . . . . . .	L Near	 005D	  _Text	
sortptablp1  . . . . . . . . . .	L Near	 006B	  _Text	
sptabl1pdone . . . . . . . . . .	L Near	 008A	  _Text	
sptnoswap  . . . . . . . . . . .	L Near	 0083	  _Text	
tmptab . . . . . . . . . . . . .	Word	 0023	  _Text	
verifys  . . . . . . . . . . . .	Byte	 0136	  _Text	
vfailed  . . . . . . . . . . . .	L Near	 0131	  _Text	
vidcontext . . . . . . . . . . .	L Near	 0000	  External
vsloop . . . . . . . . . . . . .	L Near	 0102	  _Text	
wptloop  . . . . . . . . . . . .	L Near	 01D3	  _Text	

	   0 Warnings
	   0 Errors
