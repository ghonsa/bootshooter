Microsoft (R) Macro Assembler Version 6.11		    06/17/05 15:51:28
Partiton.asm						     Page 1 - 1



				;*****************************************************************************
				;  Partition
				;  Copyright, 2005 Greg Honsa
				;*****************************************************************************
				 include pte.inc
			      C ;***********************************************************
			      C ;  Copyright 2005 Greg Honsa
			      C ;
			      C ;***********************************************************
			      C 
 = 0001			      C BOOTABLE equ 1			; set to make a bootable image
			      C OPSIZ macro
			      C 	db 66h
			      C endm
			      C 
			      C ;
			      C ;** fat type byte defs
			      C ;
 = 0001			      C FAT12 	equ 01h 	;FAT12 primary parttion (fewer than 32,680 sectors in the volume) 
 = 0002			      C XENIXR	equ 02h		;Xenix root
 = 0003			      C XENIXU  equ 03h		;Xenix usr
 = 0004			      C FAT16 	equ 04h 	;FAT16 partition or logical drive ( 16 MB) 
 = 0005			      C EXTEND  equ 05h 	;Extended partition 
 = 0006			      C BGFAT16	equ 06h		;BIGDOS FAT16 partition or logical drive (33 mb)  
 = 0007			      C NTFS	equ 07h		;Installable File System (NTFS partition or logical drive) 
 = 0008			      C AIXBOOT equ 08h		;AIX boot partition
 = 0009			      C AIXDATA equ 09h		;AIX data
 = 000A			      C OS2BOOT equ	0Ah		;OS/2 boot partition
 = 000B			      C FAT32	equ 0Bh		;FAT32 partition or logical drive 
 = 000C			      C BFAT32	equ 0Ch		;FAT32 partition or logical drive using BIOS INT 13h extensions 
 = 000E			      C BFAT16	equ 0Eh 	;BIGDOS FAT16 partition or logical drive using BIOS INT 13h extensions 
 = 000F			      C BEXTEND equ 0Fh		; Extended partition using BIOS INT 13h extensions 
 = 0012			      C EISA	equ 12h 	;EISA partition or OEM partition 
 = 0042			      C DYNVOL	equ 42h 	;Dynamic volume 
 = 0082			      C LINUXSW equ 82h		;Linux swap partition
 = 0083			      C LINUXRT equ 83h		;Linux native partition
 = 0084			      C POWMAN  equ 84h 	;Power management hibernation partition 
 = 0086			      C MDFAT16	equ 86h 	;Multidisk FAT16 volume created by using Windows NT 4.0 
 = 0087			      C MDNTFS  equ 87h 	;Multidisk NTFS volume created by using Windows NT 4.0 
 = 00A0			      C HIB		equ 0A0h 	;Laptop hibernation partition 
 = 00DE			      C DELL	equ 0DEh 	;Dell OEM partition 
 = 00FE			      C IBM		equ 0FEh 	;IBM OEM partition 
 = 00EE			      C GPT		equ 0EEh 	;GPT partition  
 = 00EF			      C EFI		equ 0EFh 	;EFI System partition on an MBR disk 
			      C 
 = 0080			      C PTE_BOOTABLE EQU 80h
 = 00AA			      C PTE_EXTENDED EQU 0AAh
			      C CYLSEC record Cylinder:10,Sector:6
			      C 
 0010			      C PARTITION_TABLE_ENTRY struc
 0000  00		      C 	bte_bootable		db	?
 0001  00		      C 	bte_starthead		db	?
 0002  0000		      C 	bte_startsector		dw	?	     
 0004  00		      C 	bte_system			db	?
 0005  00		      C 	bte_endhead			db	?
 0006  0000		      C 	bte_endsector		dw	?
 0008  00000000		      C 	bte_relativesector	dd	?
 000C  00000000		      C 	bte_totalsector		dd	?
			      C PARTITION_TABLE_ENTRY ends
			      C 
 001A			      C EXT_PARTITION struc
 0000  00 00 0000 00 00	      C   	EPpte		PARTITION_TABLE_ENTRY <>
       0000 00000000
       00000000
 0010  00000000		      C 	EPStartLBA			dd ?
 0014  00000000		      C 	EPEndLBA			dd ?
 0018  00		      C 	EPbootable			db ?
 0019  00		      C 	EPDrive				db ?
			      C EXT_PARTITION ends
			      C 
 0083			      C PARTITION_INFO struc
 0000  00 00 0000 00 00	      C   	PIpte		PARTITION_TABLE_ENTRY <>
       0000 00000000
       00000000
 0010  00000000		      C 	PIStartLBA			dd ?
 0014  00000000		      C 	PIEndLBA			dd ?
 0018  00		      C 	PIbootable			db ?
 0019  00		      C 	PIDrive				db ?
 001A  00		      C 	PIExtended			db ?
 001B  0004 [		      C    	PIEParts			EXT_PARTITION 4 DUP(<>)
        00 00 0000 00 00
        0000 00000000
        00000000 00000000
        00000000 00 00
       ]
			      C PARTITION_INFO	ends
			      C ;
			      C ;--- drive info
			      C ;
 = 0055			      C DIEXTENDED		equ	055h
 0223			      C DriveInfo	STRUC
 0000  00		      C 	DIid			db	?
 0001  00		      C 	DIHeads			db	?		
 0002  00		      C 	DIExtend		db	?
 0003  00		      C 	DISectors		db	?
 0004  00		      C 					db	?
 0005  0000		      C 	DICylinders		dw  ?
 0007  00000000		      C 	DIFreeSect		dd	?
 000B  00000000		      C 	DITotSect		dd	?
 000F  00000000		      C    	DIExtSize1		dd  ?
 0013  00000000		      C    	DIExtSize		dd  ?
 0017  0004 [		      C    	DIPartTab1		PARTITION_INFO 4 DUP (<>)
        00 00 0000 00 00
        0000 00000000
        00000000 00000000
        00000000 00 00 00
        0004 [
	 00 00 0000 00 00
	 0000 00000000
	 00000000
	 00000000
	 00000000 00 00
	]
			      C 
			      C DriveInfo	ENDS
			      C ;
			      C ; --- BIOS disk parameter table ---
			      C ;
 0010			      C BiosDrvTab	STRUC
 0000  0000		      C 	BDTCylinders	dw	?
 0002  00		      C 	BDTHeads		db	?
 0003  0000		      C 					dw	?
 0005  0000		      C 	BDTPrecomp		dw	?
 0007  00		      C 	BDTECC			db	?
 0008  00		      C 	BDTCtrl			db	?
 0009  00		      C 					db	?
 000A  0000		      C 					dw	?
 000C  0000		      C 	BDTLanding		dw	?
 000E  00		      C 	BDTSectors		db	?
 000F  00		      C 					db	?		
			      C BiosDrvTab ENDS
			      C ;
			      C ; --- BIOS extended disk parameter table
			      C ;
 001E			      C ExtBiosDrvTab STRUC
 0000  0000		      C 	EBDTBuffSz		dw	?
 0002  0000		      C 	EBDTInfo		dw	?
 0004  00000000		      C 	EBDTCylinders	dd	?
 0008  00000000		      C 	EBDTHeads		dd	?
 000C  00000000		      C 	EBDTSectors		dd	?
 0010  00000000		      C 	EBDTTotSect 	dd	?
 0014  00000000		      C 	EBDTTotSect1	dd	?
 0018  0000		      C 	EBDTSectTrk		dw	?
 001A  00000000		      C 	EBDTEDD			dd	?				   	
			      C ExtBiosDrvTab ENDS
			      C ;
			      C ;  --- entended disk address packet
			      C ;
 0018			      C ExtBiosDiskAddrPkt STRUC
 0000  00		      C 	EBDAPSz			db	?
 0001  00		      C 	EBDAPres1		db	?
 0002  00		      C 	EBDAPBlocks		db	?
 0003  00		      C 	EBDAPres2		db	?
 0004  0000		      C 	EBDAPLowPtr		dw	?
 0006  0000		      C 	EBDAPHighPtr	dw	?
 0008  00000000		      C 	EBDAPLBAlow		dd	?
 000C  00000000		      C 	EBDAPLBAhigh	dd	?
 0010  00000000		      C 	EBDAPFlatAdr1	dd	?
 0014  00000000		      C 	EBDAPFlatAdr2	dd	?
			      C ExtBiosDiskAddrPkt ENDS
			      C 	
			      C ;
			      C ; --- vesa info
			      C ;
 0200			      C VgaInfoBlock    STRUC
 0000   0001 [		      C       VESASignature   db   'VESA'      ; 4 signature bytes 
	 56 45 53 41
	]
 0004  0000		      C       VESAVersion     dw   ?           ; VESA version number
 0006  00000000		      C       OEMStringPtr    dd   ?           ; Pointer to OEM string
 000A   0004 [		      C       Capabilities    db   4 dup(?)    ; capabilities of the video environment
	 00
	]
 000E  00000000		      C       VideoModePtr    dd   ?           ; pointer to supported Super VGA modes
 0012  0000		      C       TotalMemory     dw   ?           ; Number of 64kb memory blocks on board
 0014   00EC [		      C       Reserved        db   236 dup(?)  ; Remainder of VgaInfoBlock
	 00
	]
 0100   0100 [		      C 	  OemData		  db   256 dup(?)  ;
	 00
	]
			      C VgaInfoBlock    ENDS
			      C 
				 include diskbuff.inc
			      C ;*****************************************************************************
			      C ;  DiskBuff
			      C ;  Copyright, 2005 Greg Honsa
			      C ;*****************************************************************************
			      C ; Always link last, this is not loaded from disk
			      C ;
			      C ;   --- dskbuffer - used for primary partitions ---
			      C ;
			      C extrn dskbuffer:near ptr byte
			      C extrn pte0:near
			      C extrn pte1:near
			      C extrn pte2:near
			      C extrn pte3:near
			      C 
			      C extrn dskbuffer1:near ptr byte 
			      C extrn pte10:near
			      C extrn pte11:near
			      C extrn pte12:near
			      C extrn pte13:near
			      C extrn ptsig:near ptr word
			      C 
			      C extrn dskbuffer2:near
			      C extrn ptsig2:near ptr word 
			      C  
			      C 
				 include DispUtl.inc
			      C  include vcontex.inc
			      C ;***********************************************************
			      C ;  Copyright 2005 Greg Honsa
			      C ;
			      C ;***********************************************************
			      C  include video.inc
			      C ;***********************************************************
			      C ;  Copyright 2005 Greg Honsa
			      C ;
			      C ;***********************************************************
			      C 
			      C 
 0200			      C VBEINFO struc
 0000   0001 [		      C    vbesignature 	db "VESA"		; // VBE Signature
	 56 45 53 41
	]
 0004  0000		      C    vbeversion		dw	?        	; // VBE Version
 0006  00000000		      C    oemstringptr 	dd	?			; // Pointer to OEM String
 000A   0004 [		      C    capabilities  	db 4 dup (?)   	; // Capabilities of graphics cont.
	 00
	]
 000E  00000000		      C    videomodeptr 	dd	? 			; // Pointer to Video Mode List
 0012  0000		      C    totalmemory		dw	?			; // number of 64Kb memory blocks
 0014  0000		      C    oemsoftwarerev	dw	?			; // VBE implementation Software revision
 0016  00000000		      C    oemvendornameptr	dd	?			; // Pointer to Vendor Name String
 001A  00000000		      C    oemproductnameptr dd	?			; // Pointer to Product Name String
 001E  00000000		      C    oemproductrevptr	dd	?			; // Pointer to Product Revision String
 0022   00DE [		      C    reserved 		db 222 dup (?)			; // Reserved for VBE implementation scratch area
	 00
	]
 0100   0100 [		      C    oemdata			db 256 dup (?)	; // Data Area for OEM Strings
	 00
	]
			      C VBEINFO	ends
			      C 
 0100			      C MODEINFO struc
			      C 
			      C    ;// Mandatory information for all VBE revision
			      C 
 0000  0000		      C    modeattributes	dw	?			; // Mode attributes
 0002  00		      C    winaattributes	db	?			; // Window A attributes
 0003  00		      C    winbattributes	db	?			; // Window B attributes
 0004  0000		      C    wingranularity	dw	?			; // Window granularity
 0006  0000		      C    winsize			dw	?			; // Window size
 0008  0000		      C    winasegment		dw	?			; // Window A start segment
 000A  0000		      C    winbsegment		dw	?			; // Window B start segment
 000C  00000000		      C    winfuncptr		dd	?			; // pointer to window function
 0010  0000		      C    bytesperscanline	dw	?			; // Bytes per scan line
			      C 
			      C    ;// Mandatory information for VBE 1.2 and above
			      C 
 0012  0000		      C    xresolution		dw	?			; // Horizontal resolution in pixel or chars
 0014  0000		      C    yresolution		dw	?			; // Vertical resolution in pixel or chars
 0016  00		      C    xcharsize		db	?			; // Character cell width in pixel
 0017  00		      C    ycharsize		db	?			; // Character cell height in pixel
 0018  00		      C    numberofplanes	db	?			; // Number of memory planes
 0019  00		      C    bitsperpixel		db	?			; // Bits per pixel
 001A  00		      C    numberofbanks	db	?			; // Number of banks
 001B  00		      C    memorymodel		db	?			; // Memory model type
 001C  00		      C    banksize			db	?			; // Bank size in KB
 001D  00		      C    numberofimagepages db ?			; // Number of images
 001E  00		      C    reserved1		db	?			; // Reserved for page function
			      C 
			      C    ;// Direct Color fields (required for direct/6 and YUV/7 memory models)
			      C 
 001F  00		      C    redmasksize		db	?			; // Size of direct color red mask in bits
 0020  00		      C    redfieldposition	db	?			; // Bit position of lsb of red bask
 0021  00		      C    greenmasksize	db	?			; // Size of direct color green mask in bits
 0022  00		      C    greenfieldposition db	?		; // Bit position of lsb of green bask
 0023  00		      C    bluemasksize		db	?			; // Size of direct color blue mask in bits
 0024  00		      C    bluefieldposition db ?			; // Bit position of lsb of blue bask
 0025  00		      C   rsvdmasksize		db	?			; // Size of direct color reserved mask in bits
 0026  00		      C    rsvdfieldposition db	?			; // Bit position of lsb of reserved bask   
 0027  00		      C    directcolormodeinfo db ?			; // Direct color mode attributes
			      C 
			      C    ;// Mandatory information for VBE 2.0 and above
			      C 
 0028  00000000		      C    physbaseptr		dd	?			; // Physical address for flat frame buffer
 002C  00000000		      C    offscreenmemoffset dd ?			; // Pointer to start of off screen memory
 0030  0000		      C    offscreenmemsize dw ?			; // Amount of off screen memory in 1Kb units
 0032   00CE [		      C    reserved2 db 206 dup (?)			; // Remainder of ModeInfoBlock
	 00
	]
			      C 
			      C MODEINFO ends
			      C 
 0006			      C VGACOLOR struc
 0000  0000		      C     red		dw	?
 0002  0000		      C     green	dw	?
 0004  0000		      C     blue	dw	?
			      C VGACOLOR ends
			      C 
			      C 
			      C 
			      C 
 0338			      C VDCONTX	struc
			      C 	;
			      C 	;	--- function pointers --- 
			      C 	;
 0000  0000		      C 	Create			dw	?	; Create function pointer
 0002  0000		      C 	Destroy			dw	?	; Destroy function
 0004  0000		      C 	Clear			dw	?	;
 0006  0000		      C 	getNumPages		dw	?	;
 0008  0000		      C     setActivePage	dw	?	;  
 000A  0000		      C     setVisiblePage	dw	?	;
 000C  0000		      C     pixel			dw	?	;	(int16 x, int16 y, int16 color);
 000E  0000		      C     fillRect		dw	?	;  (int16 x, int16 y, int16 width, int16 height, int16 color);
 0010  0000		      C 	drawRect		dw	?
 0012  0000		      C 	drawChar		dw	?	;	
 0014  0000		      C 	drawLine		dw	?	;
 0016  0000		      C 	drawString		dw	?	;
 0018  0000		      C 	createWindow	dw	?	;
 001A  0000		      C 	createbutton	dw	?	;
			      C 
 001C   0001 [		      C 	vbi			VBEINFO <>
	 56 45 53 41
	] 0000 00000000
        0004 [
	 00
	] 00000000 0000
        0000 00000000
        00000000 00000000
        00DE [
	 00
	]
        0100 [
	 00
	]
 021C  0000 00 00 0000	      C 	vmi 		MODEINFO <>
        0000 0000 0000
        00000000 0000
        0000 0000 00 00
        00 00 00 00 00 00
        00 00 00 00 00 00
        00 00 00 00
        00000000 00000000
        0000
        00CE [
	 00
	]
 031C  0000		      C 	origMode		dw	?	;
 031E  0000		      C 	currentMode		dw	?	;
 0320  0000		      C 	currentBank		dw	?	;
 0322  0000		      C 	banksPerPage	dw	?	;
 0324  0000		      C 	activePage		dw	?	;
 0326  0000		      C 	activePageOffset dw ?	;
 0328  0000		      C 	visiblePage		dw	?	;
 032A  0000		      C 	error			dw	?	;
 032C  0000		      C 	maxx			dw	?	;
 032E  0000		      C 	maxy			dw	?	;
 0330  0000		      C 	vwidth			dw	?	;
 0332  0000		      C 	vheight			dw	?	;
 0334  0000		      C 	fontSeg			dw	?
 0336  0000		      C 	fontOff			dw	?
			      C VDCONTX ends
			      C 
			      C 
			      C 
 0014			      C GWIND	struc
 0000  0000		      C 	xorg	dw	?			; x start
 0002  0000		      C 	yorg	dw	?			; ystart
 0004  0000		      C 	xend	dw	?
 0006  0000		      C 	yend	dw	?
 0008  0000		      C 	xsiz	dw	?			; size x
 000A  0000		      C 	ysiz	dw	?			; size y
 000C  0000		      C 	bcolor	dw	?			; background window color
 000E  0000		      C 	ccolor	dw	?			; character color
 0010  0000		      C 	currx	dw	?			; current character position
 0012  0000		      C 	curry	dw	?
			      C GWIND	ends
			      C 
			      C 
			      C ;
			      C ;
			      C ;
			      C extrn init_vid:near
			      C extrn kill_vid:near
			      C extrn printChar:near
			      C extrn printHexNibble:near
			      C extrn printHexByte:near
			      C extrn printHexWord:near
			      C extrn printHexDWord:near
			      C extrn println:near
			      C extrn print_size:near
			      C extrn showZero:near
			      C extrn GetChar:near
			      C extrn GetLine:near
			      C extrn GetNextParam:near
			      C extrn ascii2hex:near
			      C extrn displayBuffer:near
			      C extrn gwDrives:near
			      C extrn vidcontext:near
			      C extrn activeWindow:near
			      C extrn init_command:near
			      C extrn init_sector:near
			      C 
				 include error.inc
			      C ;***********************************************************
			      C ;  Copyright 2005 Greg Honsa
			      C ;
			      C ;***********************************************************
			      C 
 = 0090			      C CPERR_TAB 		equ 90h
 = 0091			      C CPERR_SPACE 	equ 91h
 = 0092			      C CPERR_CSPACE 	equ 92h
 = 0093			      C CPERR_VERIFY	equ 93h
 = 0094			      C CPERR_COMMIT	equ	94h
			      C 
				 include PartUtl.inc
			      C ;*****************************************************************************
			      C ;  PartUtl
			      C ;  Copyright, 2005 Greg Honsa
			      C ;*****************************************************************************
			      C ;
			      C extrn  PTFindFree:near	
			      C extrn  PTGetUsed:near
			      C extrn  PTSort:near
			      C extrn  PTUpdate:near
			      C extrn  PTCommit:near
			      C extrn  PTVerify:near
			      C extrn  PTGetStartLBA:near
			      C 
 0000				_Text SEGMENT PUBLIC USE16
				  assume CS:_Text, DS:_Text
														   
				extrn ReadSectExt:near
				extrn ReadSectStd:near
				extrn WriteSectExt:near
				extrn WriteSectStd:near
				extrn VerfSectExt:near
				extrn LBA2CHS:near
				extrn sSpace:near
				;*****************************************************************************
				;
				; --- CreatePartition ---  DI -> DriveInfo
				;                          EDX = number of blocks
				;							BX = type 
				;    
				;        returns ax =0 ok, else error code  tbd.   					
				;*****************************************************************************
				public CreatePartition
				 .386
 0000				CreatePartition:
				assume DI:ptr DriveInfo

 0000  56					push	si
 0001  66| 51					push	ecx		;
 0003  53			   		push	bx		; save type
				;
				;   --- step 1 -- check if partition table has free entry ---
				;
 0004  E8 0000 E				call	PTFindFree
 0007  0B DB					or		bx,bx				; Null if no free entries
 0009  75 05					jnz		partspace
 000B  B8 0090					mov		ax,CPERR_TAB
 000E  EB 6A					jmp		CPFailed
				;
				;   --- step 2 -- check if enough space left --- 
				;
 0010				partspace: 
 0010  66| 3B 55 07				cmp		edx,[di].DIFreeSect	; check DriveInfo for free space
 0014  7C 05					jl		gotspace			; enough?
 0016  B8 0091					mov		ax, CPERR_SPACE
 0019  EB 5F					jmp		CPFailed

				;
				;   --- step 3 -- select the starting sector ---
				;
 001B				gotspace:
 001B  E8 0000 E				call   PTGetUsed			; builds a list of used entries
					  assume si:ptr word 			; SI-> list
 001E  E8 0000 E				call	PTsort			; sorts list SI-> list

 0021  E8 0000 E				call	PTGetStartLBA			; Looks for space in based upon list
													; SI-> sorted list of partition entries
													; EDX has size DI->driveInfo
													; returns EAX starting lba 0 of none
 0024  66| 0B C0				or		eax,eax
 0027  75 05					jnz		cpChkDsk
 0029  B8 0092					mov		ax,CPERR_CSPACE
 002C  EB 4C					jmp		CPFailed
				;
				;   --- step 4 -- check disk integrity ---
				;
 002E				cpChkDsk:
						; eax has starting lba
						; edx has size
						; di ->DriveInfo

 002E  E8 0000 E				call	PTVerify
 0031  73 05					jnc		cpVerified
 0033  B8 0093					mov		ax,CPERR_VERIFY
 0036  EB 42					jmp		CPFailed
				;
				;   --- step 5 -- write partition table ---
				;
 0038				cpVerified:
						
						; eax has start lba
						; edx has size
						; bx has the partition table entry to update
						; di-> DriveInfo
						; cx has type
 0038  59					pop		cx					; get type from stack
 0039  51					push	cx
 003A  E8 0000 E				call 	PTUpdate	 		; updates DriveInfo
 003D  E8 0000 E				call	PTCommit
 0040  73 05					jnc		cpFormat
 0042  B8 0094					mov		ax,CPERR_COMMIT
 0045  EB 33					jmp		CPFailed
				;		
				;   --- step 6 -- format partition based upon type
				;
 0047				cpFormat:
 0047  57					push	di
 0048  66| 52					push	edx
 004A  66| 50					push	eax
 004C  8A 0D					mov		cl,[di].DIid
 004E  B8 00F6					mov		ax,0f6h
 0051  BF 0000 E				mov		di,offset dskbuffer
 0054  51					push	cx
 0055  B9 0200					mov		cx,512
 0058  F3/ AA					rep stosb
 005A  59					pop		cx
 005B  66| 58					pop		eax
 005D  BF 0000 E				mov		di,offset dskbuffer
 0060  66| BA 00000000				mov		edx,0
						
 0066  E8 0000 E				call	WriteSectExt
						
 0069  66| 5A					pop		edx
 006B  5F					pop		di
						 
 006C  BE 009C R				mov		si,offset sComplete
 006F  E8 0000 E				call	println

 0072  B8 0000					mov		ax,0
 0075  5B					pop		bx
 0076  66| 59					pop		ecx
 0078  5E					pop		si
 0079  C3					ret		
				;
				;   --- error exit ---
				;
 007A				CPFailed:
 007A  BE 0093 R				mov		si,offset sFailed
 007D  E8 0000 E				call	println

 0080  5B					pop		bx
 0081  66| 59					pop		ecx
 0083  5E					pop		si
 0084  C3					ret
 0085 56 65 72 69 66 69		sVerify	db	"Verifing disk",0
        6E 67 20 64 69 73
        6B 00
 0093 46 41 49 4C 45 44		sFailed db	"FAILED! ",0
        21 20 00
 009C 43 6F 6D 70 6C 65		sComplete db "Complete ",0
        74 65 20 00

				;*****************************************************************************
				;
				; --- ParsePTable --- BX -> PARTITION_TABLE_ENTRY[4]
				;                     DI -> DriveInfo
				;   					we copy the tabe entres into our data structs If this 
				;                       is an extended partition, we then look for another 
				;                       partition table
				;
				;*****************************************************************************
				public ParsePTable
 00A6				ParsePTable:
				   		
 00A6  51					push	cx
 00A7  56					push	si
 00A8  57					push	di
 00A9  52					push	dx

 00AA  8B D7					mov		dx,di				; save pointer to Drive Info		

					assume di:ptr DriveInfo
					assume bx:ptr PARTITION_TABLE_ENTRY

				;
				;   --- set drive into struct
				;
 00AC  8A 05					mov		al,[di].DIid		; drive id
 00AE  53					push	bx
 00AF  BB 0000					mov		bx,0
 00B2  B9 0004					mov		cx,4
 00B5				clll:
 00B5  88 41 30					mov		[di].DIPartTab1.PIDrive[bx],al
 00B8  81 C3 0083				add		bx,sizeof PARTITION_INFO
 00BC  E2 F7					loop	clll
 00BE  5B					pop		bx
						
 00BF  8B C7					mov		ax,di
 00C1  83 C0 17					add		ax,(sizeof DriveInfo - (4 * sizeof PARTITION_INFO))
 00C4  8B F8					mov		di,ax 
					
					assume di:ptr PARTITION_INFO

 00C6  B9 0004					mov		cx,4
 00C9				ptloop:

				; 
;   --- copy the table entres into our struct
				;
 00C9  57					push	di
 00CA  51					push	cx
 00CB  B9 0010					mov		cx,sizeof PARTITION_TABLE_ENTRY
 00CE  8B F3					mov		si,bx
 00D0  F3/ A4				   	rep 	movsb
 00D2  59					pop		cx
 00D3  5F					pop		di
				;
				;   --- check the boot bit in the PT
				;
						; dx-> Drive Info struct
						; di-> PARTITION_INFO
 00D4  8A 05					mov		al,[di].PIpte.bte_bootable
 00D6  88 45 18					mov		[di].PIbootable,al
				.386
 00D9  66| 8B 45 08				mov		eax,[di].PIpte.bte_relativesector
 00DD  66| 89 45 10				mov		[di].PIStartLBA,eax
 00E1  66| 03 45 0C				add		eax,[di].PIpte.bte_totalsector
 00E5  66| 89 45 14				mov		[di].PIEndLBA,eax

				.286
				;
				;   --- and read the starting sector and check for boot val
				;
 00E9  E8 0011					call	CheckPartition		
				; 
				; --- adjust pointers and loop through all 4 partitions
				;
 00EC  83 C3 10					add 	bx,sizeof PARTITION_TABLE_ENTRY
 00EF  8B C7					mov		ax,di

 00F1  05 0083					add		ax,sizeof PARTITION_INFO
 00F4  8B F8					mov		di,ax
 00F6  E2 D1					loop 	ptloop

 00F8  5A					pop		dx
 00F9  5F					pop		di
 00FA  5E					pop		si
 00FB  59					pop		cx
 00FC  C3					ret

				;******************************************************************************
				;*    CheckPartition - di-> PARTITION_INFO  dx-> DRIVE_INFO
				;*		Looks at the info in the partition table. If it looks like a valid 
				;*      the code will read the 1st sector of the partition and see if it is 
				;*      bootable, also if the partition s an extended partition, the code
				;*      then looks for a another partition table for the extension	 
				;*
				;******************************************************************************
					assume di:ptr PARTITION_INFO
					assume dx:ptr DriveInfo
				public CheckPartition

 00FD				CheckPartition:
 00FD  51					push	cx
 00FE  8B 4D 06					mov		cx,[di].PIpte.bte_endsector		; if endsector is 0 assume not valid
 0101  0B C9					or		cx,cx
 0103  75 07					jnz		validPartition
 0105  B1 FF					mov		cl,-1
 0107  88 4D 18					mov		[di].PIbootable,cl
 010A  EB 78					jmp		CPDone
				;
				;   --- partition is valid, read in the sector...
				;
 010C				validPartition:

				.386
				;
				;    --- extended or std bios read?
				;
 010C  53					push	bx
 010D  8B DA					mov		bx,dx
					assume bx:ptr DriveInfo
 010F  80 7F 02 55				cmp	[bx].DIExtend,DIEXTENDED
 0113  5B					pop		bx
 0114  74 2B					jz		cpExtRead	

				;
				;   --- setup standard bios regs ---
				;		
 0116  57					push	di	

 0117  53					push	bx
 0118  51					push	cx
 0119  52					push	dx
				 
 011A  8A 55 19					mov		dl,[di].PIDrive
 011D  8A 75 01					mov		dh,[di].PIpte.bte_starthead
 0120  8B 45 02					mov		ax,[di].PIpte.bte_startsector
 0123  24 C0					and 	al,0c0h					;MASK	Cylinder
 0125  C0 E8 06					shr		al,6
 0128  86 C4					xchg	al,ah
 012A  8B D8					mov		bx,ax
 012C  8B 45 02					mov		ax,[di].PIpte.bte_startsector
 012F  83 E0 3F					and		ax,MASK	Sector
 0132  8A C8					mov		cl,al
 0134  BF 0000 E				mov		di,offset dskbuffer1
 0137  E8 0000 E				call	ReadSectStd
						
 013A  5A					pop		dx
 013B  59					pop		cx
 013C  5B					pop		bx
 013D  72 44					jc		cpout
 013F  EB 20					jmp		cpChkSig
 0141				cpExtRead:
 0141  57					push	di

 0142  66| 52					push	edx
 0144  66| 50					push	eax

 0146  66| BA 00000000				mov		edx,0
 014C  66| 8B 45 10				mov		eax,[di].PIStartLBA				; Get the starting LBA 
				.286
 0150  8A 4D 19					mov		cl,[di].PIDrive					; drive id

 0153  0E					push	cs
 0154  07					pop		es
 0155  BF 0000 E				mov		di,offset dskbuffer1
 0158  E8 0000 E				call	ReadSectExt						; and read the sector
				.386
 015B  66| 58					pop		eax
 015D  66| 5A					pop		edx
 015F  72 22					jc		cpout
 0161				cpChkSig:

 0161  A1 0000 E				mov		ax,ptsig
 0164  3D AA55					cmp		ax,0AA55h
 0167  5F			 		pop		di
 0168  57					push	di
					assume di:ptr PARTITION_INFO
 0169  75 05					jnz		ckext

 016B  B0 80					mov		al,PTE_BOOTABLE
 016D  88 45 18					mov		[di].PIbootable,al
 0170				ckext:
				;
				; --- check if this is an extended partition
				;
 0170  8A 45 04					mov	al,[di].PIpte.bte_system
 0173  3C 05					cmp	al,EXTEND
 0175  74 04					jz	getsubparts
 0177  3C 0F					cmp	al,BEXTEND
 0179  75 08					jnz	cpout
 017B				getsubparts:
 017B  B0 AA					mov		al,PTE_EXTENDED
 017D  88 45 1A					mov		[di].PIExtended,al
					
 0180  E8 0007					call	getExtPart
				;
				;   --- all done ---
				;
 0183				cpout:
 0183  5F					pop		di

				.286
 0184				CPDone:
 0184  59					pop		cx
 0185  C3					ret

				;*****************************************************************************
				; getExtPart   DI ->PartitionInfo struct
				; 				 dskbuffer1 contains 1st sector of extended partition
				;				 dx -> DriveInfo
				;*****************************************************************************
				public getExtPart
 0186 00000000			partbase	dd 0
 018A				getExtPart:
				  assume di:ptr PARTITION_INFO
				  assume dx:ptr DriveInfo
						
 018A  56					push	si
 018B  57					push	di
 018C  51					push	cx
 018D  53					push	bx
 018E  50					push	ax
				.386
 018F  66| 8B 45 10				mov		eax,[di].PIStartLBA
 0193  66| A3 0186 R				mov		partbase,eax
				.286
				;
				;   --- adjust pointers ---
				;
 0197  8A 5D 19					mov		bl,[di].PIDrive		; get drive
 019A  B8 001B				 	mov		ax,(sizeof PARTITION_INFO - ((sizeof	EXT_PARTITION)*4))	
 019D  03 F8					add 	di,ax

						assume  di:ptr EXT_PARTITION
 019F  BE 0000 E				mov		si,offset pte10
						
				;
				;   --- we need to copy the partition tables into our structure
				;
						
 01A2  B9 0004					mov	cx,4
 01A5				extcpylp:
 01A5  88 5D 19					mov		[di].EPDrive,bl
				;
				;   --- copy ptable ---
				;
 01A8  51					push	cx
 01A9  57					push	di
 01AA  B9 0010					mov		cx,sizeof  PARTITION_TABLE_ENTRY
 01AD  F3/ A4					rep movsb
 01AF  5F					pop		di
 01B0  59					pop		cx

				;
				;  --- set other info in struct ---
				;
 01B1  8A 05					mov		al,[di].EPpte.bte_bootable
 01B3  88 45 18					mov		[di].EPbootable,al
				.386
 01B6  66| 8B 45 08				mov		eax,[di].EPpte.bte_relativesector
 01BA  66| 03 06 0186 R				add		eax,partbase
 01BF  66| 89 45 10				mov		[di].EPStartLBA,eax
 01C3  66| 03 45 0C				add		eax,[di].EPpte.bte_totalsector
				;
				;   --- read the sector and look for bootable sig ---
				;
				;    --- extended or std bios read?
				;
 01C7  53					push	bx
 01C8  8B DA					mov		bx,dx
					assume bx:ptr DriveInfo
 01CA  80 7F 02 55				cmp		[bx].DIExtend,DIEXTENDED
 01CE  5B					pop		bx
 01CF  74 2E					jz		cxpExtRead	

				;
				;   --- setup standard bios regs ---
				;		
 01D1  53					push	bx
 01D2  51					push	cx
 01D3  52					push	dx
				 
 01D4  8A 55 19					mov		dl,[di].EPDrive
 01D7  8A 75 01					mov		dh,[di].EPpte.bte_starthead
 01DA  8B 45 02					mov		ax,[di].EPpte.bte_startsector
 01DD  24 C0					and 	al,0c0h					;MASK	Cylinder
 01DF  C0 E8 06					shr		al,6
 01E2  86 C4					xchg	al,ah
 01E4  8B D8					mov		bx,ax
 01E6  8B 45 02					mov		ax,[di].EPpte.bte_startsector
 01E9  83 E0 3F					and		ax,MASK	Sector
 01EC  8A C8					mov		cl,al

 01EE  57					push	di
 01EF  BF 0000 E				mov		di,offset dskbuffer2
 01F2  E8 0000 E				call	ReadSectStd
 01F5  5F					pop		di

 01F6  5A					pop		dx
 01F7  59					pop		cx
 01F8  5B					pop		bx
 01F9  72 2E					jc		getExtPartOut
 01FB  EB 18					jmp		cxpChkSig
 01FD				relay1:
 01FD  E2 A6					loop	extcpylp
						
 01FF				cxpExtRead:

 01FF  51					push	cx
 0200  8A 4D 19					mov		cl,[di].EPDrive
 0203  57					push	di
 0204  66| 52					push	edx
 0206  66| 33 D2				xor		edx,edx
 0209  BF 0000 E				mov		di,offset dskbuffer2
 020C  E8 0000 E				call	ReadSectExt
 020F  66| 5A					pop		edx
 0211  5F					pop		di
 0212  59					pop		cx

 0213  72 14					jc		getExtPartOut
 0215				cxpChkSig:
 0215  A1 0000 E				mov		ax,ptsig2
 0218  3D AA55					cmp		ax,0AA55h
 021B  75 05					jnz		GetNextExt

 021D  B0 80					mov		al,PTE_BOOTABLE
 021F  88 45 18					mov		[di].EPbootable,al

 0222				GetNextExt:
 0222  B8 001A					mov		ax,sizeof EXT_PARTITION
 0225  03 F8					add		di,ax
 0227  EB D4					jmp		relay1


 0229				getExtPartOut:
 0229  58					pop		ax
 022A  5B					pop		bx
 022B  59					pop		cx
 022C  5F					pop		di
 022D  5E					pop		si
 022E  C3					ret
				;*****************************************************************************
				; DisplayPTable - BX -> PARTITION_INFO or EXT_PARTITION which are the same
				;				  for the elements we are displaying
				;
				;				  DX = tabs before display
				;*****************************************************************************
				public DisplayPTable
 022F				DisplayPTable:
					assume bx:ptr PARTITION_TABLE_ENTRY
 022F  50					push	ax
 0230  53					push	bx
 0231  51					push	cx
 0232  56					push	si

				 
				; -- check partition type --
 0233  BF 038A R				mov		di,offset TYPE_TAB
 0236  B9 0015					mov		cx,TYPESZ
				; -- loop through the type tablle looking for a match ---
 0239				ckptype:
 0239  8A 05					mov		al,[di]
 023B  3A 47 04					cmp		al,[bx].bte_system
 023E  74 08					jz 		match
 0240  47					inc 	di
 0241  E2 F6					loop 	ckptype
 0243  BE 0582 R				mov		si,offset sUnknown
 0246  EB 12					jmp		showtype
				; -- we have a match, display it --
				; -- using the count from the match loop 
				; -- we get the string pointer from the string table

 0248				match:
 0248  B8 0015					mov		ax,TYPESZ	 
 024B  2B C1					sub		ax,cx
 024D  8B C8					mov		cx,ax
 024F  B8 039F R				mov		ax,TYPE_STR_TAB
 0252  D1 E1					shl		cx,1
 0254  03 C1					add		ax,cx
						;sub		ax,2
 0256  8B F8					mov		di,ax
						
 0258  8B 35					mov		si,word ptr [di]
 025A				showtype:		    
 025A  E8 0000 E				call	println
				; -- get the partition size --
				.386
 025D  66| 52					push	edx
 025F  66| 51					push	ecx
 0261  66| B9 00000200				mov		ecx,512
 0267  66| 8B 47 0C				mov		eax,[bx].bte_totalsector
 026B  66| F7 E1				mul		ecx
 026E  66| B9 000F4240				mov		ecx,1000000
 0274  66| F7 F1				div		ecx
 0277  66| 59					pop		ecx
 0279  66| 5A					pop		edx
				.286
 027B  B9 000A					mov		cx,10
 027E  E8 0000 E				call	print_size
 0281  B0 4D					mov		al,'M'
 0283  E8 0000 E				call	printChar
 0286  B0 62					mov		al,'b'
 0288  E8 0000 E				call	printChar

						;mov		si,offset sLF
						;call	println
						
 028B  E9 00B4					JMP		GTO
				;
				;    --- for display of extended we need to shift right
				;
 028E  0B D2					or		dx,dx
 0290  74 06					jz		skled
 0292  BE 0000 E				mov		si,offset sSpace
 0295  E8 0000 E				call	println
 0298				skled:
				; -- get start head,sector and cylinder
 0298  BE 0378 R				mov		si,offset sStart
 029B  E8 0000 E				call	println
				;-- Start Cylinder
 029E  BE 036E R				mov		si,offset sCylinder
 02A1  E8 0000 E				call	println
 02A4  B0 30					mov		al ,'0'
 02A6  E8 0000 E				call	printChar
					
					.386
 02A9  66| 33 C0				xor		eax,eax
					.286

 02AC  8B 47 02					mov		ax,[bx].bte_startsector
 02AF  24 C0					and 	al,0c0h					;MASK	Cylinder
 02B1  C0 E8 06					shr		al,6
 02B4  86 C4					xchg	al,ah
 02B6  B9 000A					mov		cx,10	
 02B9  E8 0000 E				call print_size

				; --  Start head
 02BC  BE 0366 R				mov		si,offset sHead
 02BF  E8 0000 E				call	println
 02C2  B0 30					mov		al ,'0'
 02C4  E8 0000 E				call	printChar

					.386
 02C7  66| 33 C0				xor		eax,eax
					.286
 02CA  8A 47 01					mov		al,[bx].bte_starthead
 02CD  B9 000A					mov		cx,10
 02D0  E8 0000 E				call 	print_size
				;-- start sector
 02D3  BE 036A R				mov		si,offset sSector
 02D6  E8 0000 E				call	println
 02D9  B0 30					mov		al ,'0'
 02DB  E8 0000 E				call	printChar
					.386
 02DE  66| 33 C0				xor		eax,eax
					.286

 02E1  8B 47 02					mov		ax,[bx].bte_startsector
 02E4  83 E0 3F					and		ax,MASK	Sector
 02E7  B9 000A					mov		cx,10
 02EA  E8 0000 E				call 	print_size
				; -- end
 02ED  BE 0371 R				mov		si,offset sEnd
 02F0  E8 0000 E				call	println

				;-- end Cylinder
 02F3  BE 036E R				mov		si,offset sCylinder
 02F6  E8 0000 E				call	println
 02F9  B0 30					mov		al ,'0'
 02FB  E8 0000 E				call	printChar
					.386
 02FE  66| 33 C0				xor		eax,eax
					.286

 0301  8B 47 06					mov		ax,[bx].bte_endsector
 0304  24 C0					and 	al,0c0h					;MASK	Cylinder
 0306  C0 E8 06					shr		al,6
 0309  86 C4					xchg	al,ah
 030B  B9 000A					mov		cx,10
 030E  E8 0000 E				call 	print_size

				; -- end head ...
 0311  BE 0366 R				mov		si,offset sHead
 0314  E8 0000 E				call	println
 0317  B0 30					mov		al ,'0'
 0319  E8 0000 E				call	printChar
					.386
 031C  66| 33 C0				xor		eax,eax
					.286

 031F  8A 47 05					mov		al,[bx].bte_endhead
 0322  B9 000A					mov		cx,10
 0325  E8 0000 E				call 	print_size
				;-- end sector
 0328  BE 036A R				mov		si,offset sSector
 032B  E8 0000 E				call	println
 032E  B0 30					mov		al ,'0'
 0330  E8 0000 E				call	printChar
					.386
 0333  66| 33 C0				xor		eax,eax
					.286

 0336  8B 47 06					mov		ax,[bx].bte_endsector
 0339  83 E0 3F					and		ax,MASK	Sector
 033C  B9 000A					mov		cx,10
 033F  E8 0000 E				call 	print_size
 0342				GTO:

				; --- relative sector ---
					
 0342  BE 0360 R				mov		si,offset sRel
 0345  E8 0000 E				call	println
						

					.386
						assume bx:ptr PARTITION_INFO
 0348  66| 33 C0				xor		eax,eax
 034B  66| 8B 47 10				mov		eax,[bx].PIStartLBA
					.286
 034F  B9 000A					mov		cx,10
 0352  E8 0000 E				call 	print_size

						;mov		si,offset sLF
						;call	println
 0355  BE 0387 R				mov		si,offset sLF
 0358  E8 0000 E				call	println

 035B  5E					pop	si
 035C  59					pop	cx
 035D  5B					pop	bx
 035E  58					pop	ax
 035F  C3					ret

				;***************************************************************
				;
 0360 20 4C 42 41 3A 00		sRel		db " LBA:",0
 0366 20 48 3A 00		sHead		db " H:",0
 036A 20 53 3A 00		sSector		db " S:",0
 036E 43 3A 00			sCylinder	db "C:",0
 0371 20 20 45 6E 64 20		sEnd			db "  End ",0
        00
 0378 20 20 20 20 20 20		sStart			db "        Start ",0
        20 20 53 74 61 72
        74 20 00
 0387 0A 0D 00			sLF			db 0ah,0dh,0

 = 0015				TYPESZ	EQU 21
 038A				TYPE_TAB:
 038A  01				db	FAT12 	
 038B  04				db	FAT16 	
 038C  05				db	EXTEND  
 038D  06				db	BGFAT16	
 038E  07				db	NTFS	
 038F  0B				db	FAT32	
 0390  0C				db	BFAT32	
 0391  0E				db	BFAT16	
 0392  0F				db	BEXTEND 
 0393  12				db	EISA	
 0394  42				db	DYNVOL
 0395  82				db  LINUXSW	
 0396  83				db  LINUXRT
 0397  84				db	POWMAN  
 0398  86				db	MDFAT16	
 0399  87				db	MDNTFS  
 039A  A0				db	HIB		
 039B  DE				db	DELL	
 039C  FE				db	IBM		
 039D  EE				db	GPT		
 039E  EF				db	EFI		

 039F				TYPE_STR_TAB:
 039F  03C9 R				dw	offset sFAT12 
 03A1  03DE R				dw	offset sFAT16 
 03A3  03F3 R				dw	offset sEXTEND
 03A5  0408 R				dw	offset sBGFAT16
 03A7  041D R				dw	offset sNTFS	
 03A9  0432 R				dw	offset sFAT32	
 03AB  0447 R				dw	offset sBFAT32
 03AD  045C R				dw	offset sBFAT16
 03AF  0471 R				dw	offset sBEXTEND
 03B1  0486 R				dw	offset sEISA	
 03B3  049B R				dw	offset sDYNVOL
 03B5  0558 R				dw  offset sLINUXSW
 03B7  056D R				dw  offset sLINUXRT
 03B9  04B0 R				dw	offset sPOWMAN
 03BB  04C5 R				dw	offset sMDFAT16
 03BD  04DA R				dw	offset sMDNTFS
 03BF  04EF R				dw	offset sHIB	
 03C1  0504 R				dw	offset sDELL	
 03C3  0519 R				dw	offset sIBM	
 03C5  052E R				dw	offset sGPT	
 03C7  0543 R				dw	offset sEFI	

 03C9 46 41 54 31 32 20		sFAT12   	db "FAT12 primary       ",0 
        70 72 69 6D 61 72
        79 20 20 20 20 20
        20 20 00
 03DE 46 41 54 31 36 20		sFAT16   	db "FAT16 partition     ",0  
        70 61 72 74 69 74
        69 6F 6E 20 20 20
        20 20 00
 03F3 45 78 74 65 6E 64		sEXTEND  	db "Extended partition  ",0  
        65 64 20 70 61 72
        74 69 74 69 6F 6E
        20 20 00
 0408 42 49 47 44 4F 53		sBGFAT16 	db "BIGDOS FAT16        ",0  
        20 46 41 54 31 36
        20 20 20 20 20 20
        20 20 00
 041D 49 6E 73 74 61 6C		sNTFS	  	db "Installable (NTFS)  ",0 
        6C 61 62 6C 65 20
        28 4E 54 46 53 29
        20 20 00
 0432 46 41 54 33 32 20		sFAT32	  	db "FAT32 partition     ",0
        70 61 72 74 69 74
        69 6F 6E 20 20 20
        20 20 00
 0447 46 41 54 33 32 20		sBFAT32  	db "FAT32 INT 13h exts  ",0
        49 4E 54 20 31 33
        68 20 65 78 74 73
        20 20 00
 045C 42 49 47 44 4F 53		sBFAT16  	db "BIGDOS/FAT16/INT13x ",0
        2F 46 41 54 31 36
        2F 49 4E 54 31 33
        78 20 00
 0471 45 78 74 65 6E 64		sBEXTEND 	db "Extended INT13 exts ",0
        65 64 20 49 4E 54
        31 33 20 65 78 74
        73 20 00
 0486 45 49 53 41 20 70		sEISA	  	db "EISA partition      ",0
        61 72 74 69 74 69
        6F 6E 20 20 20 20
        20 20 00
 049B 44 79 6E 61 6D 69		sDYNVOL  	db "Dynamic volume      ",0
        63 20 76 6F 6C 75
        6D 65 20 20 20 20
        20 20 00
 04B0 50 6F 77 65 72 20		sPOWMAN  	db "Power management    ",0
        6D 61 6E 61 67 65
        6D 65 6E 74 20 20
        20 20 00
 04C5 4D 75 6C 74 69 64		sMDFAT16 	db "Multidisk FAT16 NT4 ",0
        69 73 6B 20 46 41
        54 31 36 20 4E 54
        34 20 00
 04DA 4D 75 6C 74 69 64		sMDNTFS  	db "Multidisk NTFS  NT4 ",0
        69 73 6B 20 4E 54
        46 53 20 20 4E 54
        34 20 00
 04EF 4C 61 70 74 6F 70		sHIB	  	db "Laptop hibernation  ",0
        20 68 69 62 65 72
        6E 61 74 69 6F 6E
        20 20 00
 0504 44 65 6C 6C 20 4F		sDELL	  	db "Dell OEM partition  ",0
        45 4D 20 70 61 72
        74 69 74 69 6F 6E
        20 20 00
 0519 49 42 4D 20 4F 45		sIBM	  	db "IBM OEM partition   ",0
        4D 20 70 61 72 74
        69 74 69 6F 6E 20
        20 20 00
 052E 47 50 54 20 70 61		sGPT	  	db "GPT partition       ",0
        72 74 69 74 69 6F
        6E 20 20 20 20 20
        20 20 00
 0543 45 46 49 20 53 79		sEFI	  	db "EFI System          ",0
        73 74 65 6D 20 20
        20 20 20 20 20 20
        20 20 00
 0558 4C 69 6E 75 78 20		sLINUXSW  	db "Linux swap          ",0
        73 77 61 70 20 20
        20 20 20 20 20 20
        20 20 00
 056D 4C 69 6E 75 78 20		sLINUXRT  	db "Linux native        ",0
        6E 61 74 69 76 65
        20 20 20 20 20 20
        20 20 00

 0582 55 6E 6B 6E 6F 77		sUnknown		db "Unknown ",0
        6E 20 00




 058B				_Text ENDS
					END	 
Microsoft (R) Macro Assembler Version 6.11		    06/17/05 15:51:28
Partiton.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

OPSIZ  . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

BiosDrvTab . . . . . . . . . . .	 0010
  BDTCylinders . . . . . . . . .	 0000	     Word
  BDTHeads . . . . . . . . . . .	 0002	     Byte
  BDTPrecomp . . . . . . . . . .	 0005	     Word
  BDTECC . . . . . . . . . . . .	 0007	     Byte
  BDTCtrl  . . . . . . . . . . .	 0008	     Byte
  BDTLanding . . . . . . . . . .	 000C	     Word
  BDTSectors . . . . . . . . . .	 000E	     Byte
DriveInfo  . . . . . . . . . . .	 0223
  DIid . . . . . . . . . . . . .	 0000	     Byte
  DIHeads  . . . . . . . . . . .	 0001	     Byte
  DIExtend . . . . . . . . . . .	 0002	     Byte
  DISectors  . . . . . . . . . .	 0003	     Byte
  DICylinders  . . . . . . . . .	 0005	     Word
  DIFreeSect . . . . . . . . . .	 0007	     DWord
  DITotSect  . . . . . . . . . .	 000B	     DWord
  DIExtSize1 . . . . . . . . . .	 000F	     DWord
  DIExtSize  . . . . . . . . . .	 0013	     DWord
  DIPartTab1 . . . . . . . . . .	 0017	      0083
EXT_PARTITION  . . . . . . . . .	 001A
  EPpte  . . . . . . . . . . . .	 0000	      0010
  EPStartLBA . . . . . . . . . .	 0010	     DWord
  EPEndLBA . . . . . . . . . . .	 0014	     DWord
  EPbootable . . . . . . . . . .	 0018	     Byte
  EPDrive  . . . . . . . . . . .	 0019	     Byte
ExtBiosDiskAddrPkt . . . . . . .	 0018
  EBDAPSz  . . . . . . . . . . .	 0000	     Byte
  EBDAPres1  . . . . . . . . . .	 0001	     Byte
  EBDAPBlocks  . . . . . . . . .	 0002	     Byte
  EBDAPres2  . . . . . . . . . .	 0003	     Byte
  EBDAPLowPtr  . . . . . . . . .	 0004	     Word
  EBDAPHighPtr . . . . . . . . .	 0006	     Word
  EBDAPLBAlow  . . . . . . . . .	 0008	     DWord
  EBDAPLBAhigh . . . . . . . . .	 000C	     DWord
  EBDAPFlatAdr1  . . . . . . . .	 0010	     DWord
  EBDAPFlatAdr2  . . . . . . . .	 0014	     DWord
ExtBiosDrvTab  . . . . . . . . .	 001E
  EBDTBuffSz . . . . . . . . . .	 0000	     Word
  EBDTInfo . . . . . . . . . . .	 0002	     Word
  EBDTCylinders  . . . . . . . .	 0004	     DWord
  EBDTHeads  . . . . . . . . . .	 0008	     DWord
  EBDTSectors  . . . . . . . . .	 000C	     DWord
  EBDTTotSect  . . . . . . . . .	 0010	     DWord
  EBDTTotSect1 . . . . . . . . .	 0014	     DWord
  EBDTSectTrk  . . . . . . . . .	 0018	     Word
  EBDTEDD  . . . . . . . . . . .	 001A	     DWord
GWIND  . . . . . . . . . . . . .	 0014
  xorg . . . . . . . . . . . . .	 0000	     Word
  yorg . . . . . . . . . . . . .	 0002	     Word
  xend . . . . . . . . . . . . .	 0004	     Word
  yend . . . . . . . . . . . . .	 0006	     Word
  xsiz . . . . . . . . . . . . .	 0008	     Word
  ysiz . . . . . . . . . . . . .	 000A	     Word
  bcolor . . . . . . . . . . . .	 000C	     Word
  ccolor . . . . . . . . . . . .	 000E	     Word
  currx  . . . . . . . . . . . .	 0010	     Word
  curry  . . . . . . . . . . . .	 0012	     Word
MODEINFO . . . . . . . . . . . .	 0100
  modeattributes . . . . . . . .	 0000	     Word
  winaattributes . . . . . . . .	 0002	     Byte
  winbattributes . . . . . . . .	 0003	     Byte
  wingranularity . . . . . . . .	 0004	     Word
  winsize  . . . . . . . . . . .	 0006	     Word
  winasegment  . . . . . . . . .	 0008	     Word
  winbsegment  . . . . . . . . .	 000A	     Word
  winfuncptr . . . . . . . . . .	 000C	     DWord
  bytesperscanline . . . . . . .	 0010	     Word
  xresolution  . . . . . . . . .	 0012	     Word
  yresolution  . . . . . . . . .	 0014	     Word
  xcharsize  . . . . . . . . . .	 0016	     Byte
  ycharsize  . . . . . . . . . .	 0017	     Byte
  numberofplanes . . . . . . . .	 0018	     Byte
  bitsperpixel . . . . . . . . .	 0019	     Byte
  numberofbanks  . . . . . . . .	 001A	     Byte
  memorymodel  . . . . . . . . .	 001B	     Byte
  banksize . . . . . . . . . . .	 001C	     Byte
  numberofimagepages . . . . . .	 001D	     Byte
  reserved1  . . . . . . . . . .	 001E	     Byte
  redmasksize  . . . . . . . . .	 001F	     Byte
  redfieldposition . . . . . . .	 0020	     Byte
  greenmasksize  . . . . . . . .	 0021	     Byte
  greenfieldposition . . . . . .	 0022	     Byte
  bluemasksize . . . . . . . . .	 0023	     Byte
  bluefieldposition  . . . . . .	 0024	     Byte
  rsvdmasksize . . . . . . . . .	 0025	     Byte
  rsvdfieldposition  . . . . . .	 0026	     Byte
  directcolormodeinfo  . . . . .	 0027	     Byte
  physbaseptr  . . . . . . . . .	 0028	     DWord
  offscreenmemoffset . . . . . .	 002C	     DWord
  offscreenmemsize . . . . . . .	 0030	     Word
  reserved2  . . . . . . . . . .	 0032	     Byte
PARTITION_INFO . . . . . . . . .	 0083
  PIpte  . . . . . . . . . . . .	 0000	      0010
  PIStartLBA . . . . . . . . . .	 0010	     DWord
  PIEndLBA . . . . . . . . . . .	 0014	     DWord
  PIbootable . . . . . . . . . .	 0018	     Byte
  PIDrive  . . . . . . . . . . .	 0019	     Byte
  PIExtended . . . . . . . . . .	 001A	     Byte
  PIEParts . . . . . . . . . . .	 001B	      001A
PARTITION_TABLE_ENTRY  . . . . .	 0010
  bte_bootable . . . . . . . . .	 0000	     Byte
  bte_starthead  . . . . . . . .	 0001	     Byte
  bte_startsector  . . . . . . .	 0002	     Word
  bte_system . . . . . . . . . .	 0004	     Byte
  bte_endhead  . . . . . . . . .	 0005	     Byte
  bte_endsector  . . . . . . . .	 0006	     Word
  bte_relativesector . . . . . .	 0008	     DWord
  bte_totalsector  . . . . . . .	 000C	     DWord
VBEINFO  . . . . . . . . . . . .	 0200
  vbesignature . . . . . . . . .	 0000	     Byte
  vbeversion . . . . . . . . . .	 0004	     Word
  oemstringptr . . . . . . . . .	 0006	     DWord
  capabilities . . . . . . . . .	 000A	     Byte
  videomodeptr . . . . . . . . .	 000E	     DWord
  totalmemory  . . . . . . . . .	 0012	     Word
  oemsoftwarerev . . . . . . . .	 0014	     Word
  oemvendornameptr . . . . . . .	 0016	     DWord
  oemproductnameptr  . . . . . .	 001A	     DWord
  oemproductrevptr . . . . . . .	 001E	     DWord
  reserved . . . . . . . . . . .	 0022	     Byte
  oemdata  . . . . . . . . . . .	 0100	     Byte
VDCONTX  . . . . . . . . . . . .	 0338
  Create . . . . . . . . . . . .	 0000	     Word
  Destroy  . . . . . . . . . . .	 0002	     Word
  Clear  . . . . . . . . . . . .	 0004	     Word
  getNumPages  . . . . . . . . .	 0006	     Word
  setActivePage  . . . . . . . .	 0008	     Word
  setVisiblePage . . . . . . . .	 000A	     Word
  pixel  . . . . . . . . . . . .	 000C	     Word
  fillRect . . . . . . . . . . .	 000E	     Word
  drawRect . . . . . . . . . . .	 0010	     Word
  drawChar . . . . . . . . . . .	 0012	     Word
  drawLine . . . . . . . . . . .	 0014	     Word
  drawString . . . . . . . . . .	 0016	     Word
  createWindow . . . . . . . . .	 0018	     Word
  createbutton . . . . . . . . .	 001A	     Word
  vbi  . . . . . . . . . . . . .	 001C	      0200
  vmi  . . . . . . . . . . . . .	 021C	      0100
  origMode . . . . . . . . . . .	 031C	     Word
  currentMode  . . . . . . . . .	 031E	     Word
  currentBank  . . . . . . . . .	 0320	     Word
  banksPerPage . . . . . . . . .	 0322	     Word
  activePage . . . . . . . . . .	 0324	     Word
  activePageOffset . . . . . . .	 0326	     Word
  visiblePage  . . . . . . . . .	 0328	     Word
  error  . . . . . . . . . . . .	 032A	     Word
  maxx . . . . . . . . . . . . .	 032C	     Word
  maxy . . . . . . . . . . . . .	 032E	     Word
  vwidth . . . . . . . . . . . .	 0330	     Word
  vheight  . . . . . . . . . . .	 0332	     Word
  fontSeg  . . . . . . . . . . .	 0334	     Word
  fontOff  . . . . . . . . . . .	 0336	     Word
VGACOLOR . . . . . . . . . . . .	 0006
  red  . . . . . . . . . . . . .	 0000	     Word
  green  . . . . . . . . . . . .	 0002	     Word
  blue . . . . . . . . . . . . .	 0004	     Word
VgaInfoBlock . . . . . . . . . .	 0200
  VESASignature  . . . . . . . .	 0000	     Byte
  VESAVersion  . . . . . . . . .	 0004	     Word
  OEMStringPtr . . . . . . . . .	 0006	     DWord
  Capabilities . . . . . . . . .	 000A	     Byte
  VideoModePtr . . . . . . . . .	 000E	     DWord
  TotalMemory  . . . . . . . . .	 0012	     Word
  Reserved . . . . . . . . . . .	 0014	     Byte
  OemData  . . . . . . . . . . .	 0100	     Byte


Records:

                N a m e                  Width     # fields
                                         Shift     Width     Mask      Initial

CYLSEC . . . . . . . . . . . . .	 0010	   0002
  Cylinder . . . . . . . . . . .	 0006	   000A	     FFC0     ?
  Sector . . . . . . . . . . . .	 0000	   0006	     003F     ?


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

_Text  . . . . . . . . . . . . .	16 Bit	 058B	  Para	  Public  


Symbols:

                N a m e                 Type     Value    Attr

AIXBOOT  . . . . . . . . . . . .	Number	 0008h	 
AIXDATA  . . . . . . . . . . . .	Number	 0009h	 
BEXTEND  . . . . . . . . . . . .	Number	 000Fh	 
BFAT16 . . . . . . . . . . . . .	Number	 000Eh	 
BFAT32 . . . . . . . . . . . . .	Number	 000Ch	 
BGFAT16  . . . . . . . . . . . .	Number	 0006h	 
BOOTABLE . . . . . . . . . . . .	Number	 0001h	 
CPDone . . . . . . . . . . . . .	L Near	 0184	  _Text	
CPERR_COMMIT . . . . . . . . . .	Number	 0094h	 
CPERR_CSPACE . . . . . . . . . .	Number	 0092h	 
CPERR_SPACE  . . . . . . . . . .	Number	 0091h	 
CPERR_TAB  . . . . . . . . . . .	Number	 0090h	 
CPERR_VERIFY . . . . . . . . . .	Number	 0093h	 
CPFailed . . . . . . . . . . . .	L Near	 007A	  _Text	
CheckPartition . . . . . . . . .	L Near	 00FD	  _Text	Public
CreatePartition  . . . . . . . .	L Near	 0000	  _Text	Public
DELL . . . . . . . . . . . . . .	Number	 00DEh	 
DIEXTENDED . . . . . . . . . . .	Number	 0055h	 
DYNVOL . . . . . . . . . . . . .	Number	 0042h	 
DisplayPTable  . . . . . . . . .	L Near	 022F	  _Text	Public
EFI  . . . . . . . . . . . . . .	Number	 00EFh	 
EISA . . . . . . . . . . . . . .	Number	 0012h	 
EXTEND . . . . . . . . . . . . .	Number	 0005h	 
FAT12  . . . . . . . . . . . . .	Number	 0001h	 
FAT16  . . . . . . . . . . . . .	Number	 0004h	 
FAT32  . . . . . . . . . . . . .	Number	 000Bh	 
GPT  . . . . . . . . . . . . . .	Number	 00EEh	 
GTO  . . . . . . . . . . . . . .	L Near	 0342	  _Text	
GetChar  . . . . . . . . . . . .	L Near	 0000	  External
GetLine  . . . . . . . . . . . .	L Near	 0000	  External
GetNextExt . . . . . . . . . . .	L Near	 0222	  _Text	
GetNextParam . . . . . . . . . .	L Near	 0000	  External
HIB  . . . . . . . . . . . . . .	Number	 00A0h	 
IBM  . . . . . . . . . . . . . .	Number	 00FEh	 
LBA2CHS  . . . . . . . . . . . .	L Near	 0000	  _Text	External
LINUXRT  . . . . . . . . . . . .	Number	 0083h	 
LINUXSW  . . . . . . . . . . . .	Number	 0082h	 
MDFAT16  . . . . . . . . . . . .	Number	 0086h	 
MDNTFS . . . . . . . . . . . . .	Number	 0087h	 
NTFS . . . . . . . . . . . . . .	Number	 0007h	 
OS2BOOT  . . . . . . . . . . . .	Number	 000Ah	 
POWMAN . . . . . . . . . . . . .	Number	 0084h	 
PTCommit . . . . . . . . . . . .	L Near	 0000	  External
PTE_BOOTABLE . . . . . . . . . .	Number	 0080h	 
PTE_EXTENDED . . . . . . . . . .	Number	 00AAh	 
PTFindFree . . . . . . . . . . .	L Near	 0000	  External
PTGetStartLBA  . . . . . . . . .	L Near	 0000	  External
PTGetUsed  . . . . . . . . . . .	L Near	 0000	  External
PTSort . . . . . . . . . . . . .	L Near	 0000	  External
PTUpdate . . . . . . . . . . . .	L Near	 0000	  External
PTVerify . . . . . . . . . . . .	L Near	 0000	  External
ParsePTable  . . . . . . . . . .	L Near	 00A6	  _Text	Public
ReadSectExt  . . . . . . . . . .	L Near	 0000	  _Text	External
ReadSectStd  . . . . . . . . . .	L Near	 0000	  _Text	External
TYPESZ . . . . . . . . . . . . .	Number	 0015h	 
TYPE_STR_TAB . . . . . . . . . .	L Near	 039F	  _Text	
TYPE_TAB . . . . . . . . . . . .	L Near	 038A	  _Text	
VerfSectExt  . . . . . . . . . .	L Near	 0000	  _Text	External
WriteSectExt . . . . . . . . . .	L Near	 0000	  _Text	External
WriteSectStd . . . . . . . . . .	L Near	 0000	  _Text	External
XENIXR . . . . . . . . . . . . .	Number	 0002h	 
XENIXU . . . . . . . . . . . . .	Number	 0003h	 
activeWindow . . . . . . . . . .	L Near	 0000	  External
ascii2hex  . . . . . . . . . . .	L Near	 0000	  External
ckext  . . . . . . . . . . . . .	L Near	 0170	  _Text	
ckptype  . . . . . . . . . . . .	L Near	 0239	  _Text	
clll . . . . . . . . . . . . . .	L Near	 00B5	  _Text	
cpChkDsk . . . . . . . . . . . .	L Near	 002E	  _Text	
cpChkSig . . . . . . . . . . . .	L Near	 0161	  _Text	
cpExtRead  . . . . . . . . . . .	L Near	 0141	  _Text	
cpFormat . . . . . . . . . . . .	L Near	 0047	  _Text	
cpVerified . . . . . . . . . . .	L Near	 0038	  _Text	
cpout  . . . . . . . . . . . . .	L Near	 0183	  _Text	
cxpChkSig  . . . . . . . . . . .	L Near	 0215	  _Text	
cxpExtRead . . . . . . . . . . .	L Near	 01FF	  _Text	
displayBuffer  . . . . . . . . .	L Near	 0000	  External
dskbuffer1 . . . . . . . . . . .	Word	 0000	  External
dskbuffer2 . . . . . . . . . . .	L Near	 0000	  External
dskbuffer  . . . . . . . . . . .	Word	 0000	  External
extcpylp . . . . . . . . . . . .	L Near	 01A5	  _Text	
getExtPartOut  . . . . . . . . .	L Near	 0229	  _Text	
getExtPart . . . . . . . . . . .	L Near	 018A	  _Text	Public
getsubparts  . . . . . . . . . .	L Near	 017B	  _Text	
gotspace . . . . . . . . . . . .	L Near	 001B	  _Text	
gwDrives . . . . . . . . . . . .	L Near	 0000	  External
init_command . . . . . . . . . .	L Near	 0000	  External
init_sector  . . . . . . . . . .	L Near	 0000	  External
init_vid . . . . . . . . . . . .	L Near	 0000	  External
kill_vid . . . . . . . . . . . .	L Near	 0000	  External
match  . . . . . . . . . . . . .	L Near	 0248	  _Text	
partbase . . . . . . . . . . . .	DWord	 0186	  _Text	
partspace  . . . . . . . . . . .	L Near	 0010	  _Text	
printChar  . . . . . . . . . . .	L Near	 0000	  External
printHexByte . . . . . . . . . .	L Near	 0000	  External
printHexDWord  . . . . . . . . .	L Near	 0000	  External
printHexNibble . . . . . . . . .	L Near	 0000	  External
printHexWord . . . . . . . . . .	L Near	 0000	  External
print_size . . . . . . . . . . .	L Near	 0000	  External
println  . . . . . . . . . . . .	L Near	 0000	  External
pte0 . . . . . . . . . . . . . .	L Near	 0000	  External
pte10  . . . . . . . . . . . . .	L Near	 0000	  External
pte11  . . . . . . . . . . . . .	L Near	 0000	  External
pte12  . . . . . . . . . . . . .	L Near	 0000	  External
pte13  . . . . . . . . . . . . .	L Near	 0000	  External
pte1 . . . . . . . . . . . . . .	L Near	 0000	  External
pte2 . . . . . . . . . . . . . .	L Near	 0000	  External
pte3 . . . . . . . . . . . . . .	L Near	 0000	  External
ptloop . . . . . . . . . . . . .	L Near	 00C9	  _Text	
ptsig2 . . . . . . . . . . . . .	Word	 0000	  External
ptsig  . . . . . . . . . . . . .	Word	 0000	  External
relay1 . . . . . . . . . . . . .	L Near	 01FD	  _Text	
sBEXTEND . . . . . . . . . . . .	Byte	 0471	  _Text	
sBFAT16  . . . . . . . . . . . .	Byte	 045C	  _Text	
sBFAT32  . . . . . . . . . . . .	Byte	 0447	  _Text	
sBGFAT16 . . . . . . . . . . . .	Byte	 0408	  _Text	
sComplete  . . . . . . . . . . .	Byte	 009C	  _Text	
sCylinder  . . . . . . . . . . .	Byte	 036E	  _Text	
sDELL  . . . . . . . . . . . . .	Byte	 0504	  _Text	
sDYNVOL  . . . . . . . . . . . .	Byte	 049B	  _Text	
sEFI . . . . . . . . . . . . . .	Byte	 0543	  _Text	
sEISA  . . . . . . . . . . . . .	Byte	 0486	  _Text	
sEXTEND  . . . . . . . . . . . .	Byte	 03F3	  _Text	
sEnd . . . . . . . . . . . . . .	Byte	 0371	  _Text	
sFAT12 . . . . . . . . . . . . .	Byte	 03C9	  _Text	
sFAT16 . . . . . . . . . . . . .	Byte	 03DE	  _Text	
sFAT32 . . . . . . . . . . . . .	Byte	 0432	  _Text	
sFailed  . . . . . . . . . . . .	Byte	 0093	  _Text	
sGPT . . . . . . . . . . . . . .	Byte	 052E	  _Text	
sHIB . . . . . . . . . . . . . .	Byte	 04EF	  _Text	
sHead  . . . . . . . . . . . . .	Byte	 0366	  _Text	
sIBM . . . . . . . . . . . . . .	Byte	 0519	  _Text	
sLF  . . . . . . . . . . . . . .	Byte	 0387	  _Text	
sLINUXRT . . . . . . . . . . . .	Byte	 056D	  _Text	
sLINUXSW . . . . . . . . . . . .	Byte	 0558	  _Text	
sMDFAT16 . . . . . . . . . . . .	Byte	 04C5	  _Text	
sMDNTFS  . . . . . . . . . . . .	Byte	 04DA	  _Text	
sNTFS  . . . . . . . . . . . . .	Byte	 041D	  _Text	
sPOWMAN  . . . . . . . . . . . .	Byte	 04B0	  _Text	
sRel . . . . . . . . . . . . . .	Byte	 0360	  _Text	
sSector  . . . . . . . . . . . .	Byte	 036A	  _Text	
sSpace . . . . . . . . . . . . .	L Near	 0000	  _Text	External
sStart . . . . . . . . . . . . .	Byte	 0378	  _Text	
sUnknown . . . . . . . . . . . .	Byte	 0582	  _Text	
sVerify  . . . . . . . . . . . .	Byte	 0085	  _Text	
showZero . . . . . . . . . . . .	L Near	 0000	  External
showtype . . . . . . . . . . . .	L Near	 025A	  _Text	
skled  . . . . . . . . . . . . .	L Near	 0298	  _Text	
validPartition . . . . . . . . .	L Near	 010C	  _Text	
vidcontext . . . . . . . . . . .	L Near	 0000	  External

	   0 Warnings
	   0 Errors
